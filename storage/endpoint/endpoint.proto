syntax = "proto3";

import "records/records.proto";

option go_package = "chronicler/storage/endpoint";

package chronicler.storage;

message SaveRequest {
    chronicler.records.RecordSet recordSet = 1;
}

message SaveResponse {}

message ListRequest {
    // TODO: add filtering and pagination
}

message ListResponse { 

  // To be used in streams as total number of record sets could be too big
  chronicler.records.RecordSet recordSet = 1; 
}

message DeleteRequest { repeated string recordSetIds = 1; }

message DeleteResponse {}

message GetRequest { repeated string recordSetIds = 1; }

message GetResponse { repeated chronicler.records.RecordSet recordSets = 1; }

message GetFileRequest {
  message FileDef {
    string recordSetId = 1;
    string filename = 2;
  }
  repeated FileDef file = 1;
}

message FilePart {
  int32 fileId = 1;

  oneof data {
    Chunk chunk = 2;
    Error error = 3;
  }

  message Chunk {
    int32 chunkId = 2;
    int32 size = 3;
    bytes data = 4;
  }

  message Error { string error = 1; }
}

message GetFileResponse { FilePart part = 1; }

message PutFileRequest { FilePart part = 1;}

message PutFileResponse {
};

service Storage {
  rpc save(SaveRequest) returns (SaveResponse) {};
  rpc list(ListRequest) returns (stream ListResponse) {};
  rpc delete (DeleteRequest) returns (DeleteResponse) {};
  rpc get(GetRequest) returns (GetResponse) {};

  rpc getFile(GetFileRequest) returns (stream GetFileResponse) {};
  rpc putFile(stream PutFileRequest) returns (PutFileResponse) {};
}
