syntax = "proto3";
package telegram;

option go_package="chronist/telegram";


message GetMeResponse {
  bool ok = 1;
  int64 error_code = 2;
  string description = 3;
  User result = 4;
}

message GetUpdateResponse {
  bool ok = 1;
  int64 error_code = 2;
  string description = 3;
  repeated Update result = 4;
}

message InputFile{}
message BotCommandScope{}
message VoiceChatStarted{}
message InputMessageContent{}
message ChatMember{}
message CallbackGame{}
message InputMedia{}t
message InlineQueryResult{}
message PassportElementError{}

message unpinAllChatMessages {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;
}

message Animation {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Video width as defined by sender
  int64 width = 3;

  // Video height as defined by sender
  int64 height = 4;

  // Duration of the video in seconds as defined by sender
  int64 duration = 5;

  // Optional. Animation thumbnail as defined by sender
  PhotoSize thumb = 6;

  // Optional. Original animation filename as defined by sender
  string file_name = 7;

  // Optional. MIME type of the file as defined by sender
  string mime_type = 8;

  // Optional. File size in bytes
  int64 file_size = 9;
}

message sendAnimation {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Animation to send. Pass a file_id as String to send an animation that exists on the Telegram
  // servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the
  // Internet, or upload a new animation using multipart/form-data. More info on Sending Files »
  bytes animation = 2;

  // Duration of sent animation in seconds
  int64 duration = 3;

  // Animation width
  int64 width = 4;

  // Animation height
  int64 height = 5;

  // Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
  // server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
  // width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 6;

  // Animation caption (may also be used when resending animation by file_id), 0-1024 characters
  // after entities parsing
  string caption = 7;

  // Mode for parsing entities in the animation caption. See formatting options for more details.
  string parse_mode = 8;

  // A JSON-serialized list of special entities that appear in the caption, which can be specified
  // instead of parse_mode
  repeated MessageEntity caption_entities = 9;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 10;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 11;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 12;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 13;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 14;
}

message Audio {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Duration of the audio in seconds as defined by sender
  int64 duration = 3;

  // Optional. Performer of the audio as defined by sender or by audio tags
  string performer = 4;

  // Optional. Title of the audio as defined by sender or by audio tags
  string title = 5;

  // Optional. Original filename as defined by sender
  string file_name = 6;

  // Optional. MIME type of the file as defined by sender
  string mime_type = 7;

  // Optional. File size in bytes
  int64 file_size = 8;

  // Optional. Thumbnail of the album cover to which the music file belongs
  PhotoSize thumb = 9;
}

message sendAudio {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram
  // servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the
  // Internet, or upload a new one using multipart/form-data. More info on Sending Files »
  bytes audio = 2;

  // Audio caption, 0-1024 characters after entities parsing
  string caption = 3;

  // Mode for parsing entities in the audio caption. See formatting options for more details.
  string parse_mode = 4;

  // A JSON-serialized list of special entities that appear in the caption, which can be specified
  // instead of parse_mode
  repeated MessageEntity caption_entities = 5;

  // Duration of the audio in seconds
  int64 duration = 6;

  // Performer
  string performer = 7;

  // Track name
  string title = 8;

  // Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
  // server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
  // width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 9;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 10;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 11;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 12;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 13;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 14;
}

message BotCommand {

  // Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and
  // underscores.
  string command = 1;

  // Description of the command; 1-256 characters.
  string description = 2;
}

message BotCommandScopeAllChatAdministrators {

  // Scope type, must be all_chat_administrators
  string type = 1;
}

message BotCommandScopeAllGroupChats {

  // Scope type, must be all_group_chats
  string type = 1;
}

message BotCommandScopeAllPrivateChats {

  // Scope type, must be all_private_chats
  string type = 1;
}

message BotCommandScopeChat {

  // Scope type, must be chat
  string type = 1;

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 2;
}

message BotCommandScopeChatAdministrators {

  // Scope type, must be chat_administrators
  string type = 1;

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 2;
}

message BotCommandScopeChatMember {

  // Scope type, must be chat_member
  string type = 1;

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 2;

  // Unique identifier of the target user
  int64 user_id = 3;
}

message BotCommandScopeDefault {

  // Scope type, must be default
  string type = 1;
}

message CallbackQuery {

  // Unique identifier for this query
  string id = 1;

  // Sender
  User from = 2;

  // Optional. Message with the callback button that originated the query. Note that message content
  // and message date will not be available if the message is too old
  Message message = 3;

  // Optional. Identifier of the message sent via the bot in inline mode, that originated the query.
  string inline_message_id = 4;

  // Global identifier, uniquely corresponding to the chat to which the message with the callback
  // button was sent. Useful for high scores in games.
  string chat_instance = 5;

  // Optional. Data associated with the callback button. Be aware that a bad client can send
  // arbitrary data in this field.
  string data = 6;

  // Optional. Short name of a Game to be returned, serves as the unique identifier for the game
  string game_short_name = 7;
}

message answerCallbackQuery {

  // Unique identifier for the query to be answered
  string callback_query_id = 1;

  // Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters
  string text = 2;

  // If True, an alert will be shown by the client instead of a notification at the top of the chat
  // screen. Defaults to false.
  bool show_alert = 3;

  // URL that will be opened by the user's client. If you have created a Game and accepted the
  // conditions via @Botfather, specify the URL that opens your game — note that this will only work
  // if the query comes from a callback_game button.Otherwise, you may use links like
  // t.me/your_bot?start=XXXX that open your bot with a parameter.
  string url = 4;

  // The maximum amount of time in seconds that the result of the callback query may be cached
  // client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0.
  int64 cache_time = 5;
}

message Chat {

  // Unique identifier for this chat. This number may have more than 32 significant bits and some
  // programming languages may have difficulty/silent defects in interpreting it. But it has at most
  // 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for
  // storing this identifier.
  int64 id = 1;

  // Type of chat, can be either “private”, “group”, “supergroup” or “channel”
  string type = 2;

  // Optional. Title, for supergroups, channels and group chats
  string title = 3;

  // Optional. Username, for private chats, supergroups and channels if available
  string username = 4;

  // Optional. First name of the other party in a private chat
  string first_name = 5;

  // Optional. Last name of the other party in a private chat
  string last_name = 6;

  // Optional. Chat photo. Returned only in getChat.
  ChatPhoto photo = 7;

  // Optional. Bio of the other party in a private chat. Returned only in getChat.
  string bio = 8;

  // Optional. True, if privacy settings of the other party in the private chat allows to use
  // tg://user?id=<user_id> links only in chats with the user. Returned only in getChat.
  bool has_private_forwards = 9;

  // Optional. Description, for groups, supergroups and channel chats. Returned only in getChat.
  string description = 10;

  // Optional. Primary invite link, for groups, supergroups and channel chats. Returned only in
  // getChat.
  string invite_link = 11;

  // Optional. The most recent pinned message (by sending date). Returned only in getChat.
  Message pinned_message = 12;

  // Optional. Default chat member permissions, for groups and supergroups. Returned only in
  // getChat.
  ChatPermissions permissions = 13;

  // Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each
  // unpriviledged user; in seconds. Returned only in getChat.
  int64 slow_mode_delay = 14;

  // Optional. The time after which all messages sent to the chat will be automatically deleted; in
  // seconds. Returned only in getChat.
  int64 message_auto_delete_time = 15;

  // Optional. True, if messages from the chat can't be forwarded to other chats. Returned only in
  // getChat.
  bool has_protected_content = 16;

  // Optional. For supergroups, name of group sticker set. Returned only in getChat.
  string sticker_set_name = 17;

  // Optional. True, if the bot can change the group sticker set. Returned only in getChat.
  bool can_set_sticker_set = 18;

  // Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a
  // channel and vice versa; for supergroups and channel chats. This identifier may be greater than
  // 32 bits and some programming languages may have difficulty/silent defects in interpreting it.
  // But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are
  // safe for storing this identifier. Returned only in getChat.
  int64 linked_chat_id = 19;

  // Optional. For supergroups, the location to which the supergroup is connected. Returned only in
  // getChat.
  ChatLocation location = 20;
}

message leaveChat {

  // Unique identifier for the target chat or username of the target supergroup or channel (in the
  // format @channelusername)
  bytes chat_id = 1;
}

message getChat {

  // Unique identifier for the target chat or username of the target supergroup or channel (in the
  // format @channelusername)
  bytes chat_id = 1;
}

message sendChatAction {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Type of action to broadcast. Choose one, depending on what the user is about to receive: typing
  // for text messages, upload_photo for photos, record_video or upload_video for videos,
  // record_voice or upload_voice for voice notes, upload_document for general files, choose_sticker
  // for stickers, find_location for location data, record_video_note or upload_video_note for video
  // notes.
  string action = 2;
}

message setChatAdministratorCustomTitle {

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;

  // New custom title for the administrator; 0-16 characters, emoji are not allowed
  string custom_title = 3;
}

message getChatAdministrators {

  // Unique identifier for the target chat or username of the target supergroup or channel (in the
  // format @channelusername)
  bytes chat_id = 1;
}

message setChatDescription {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // New chat description, 0-255 characters
  string description = 2;
}

message ChatInviteLink {

  // The invite link. If the link was created by another chat administrator, then the second part of
  // the link will be replaced with “…”.
  string invite_link = 1;

  // Creator of the link
  User creator = 2;

  // True, if users joining the chat via the link need to be approved by chat administrators
  bool creates_join_request = 3;

  // True, if the link is primary
  bool is_primary = 4;

  // True, if the link is revoked
  bool is_revoked = 5;

  // Optional. Invite link name
  string name = 6;

  // Optional. Point in time (Unix timestamp) when the link will expire or has been expired
  int64 expire_date = 7;

  // Optional. Maximum number of users that can be members of the chat simultaneously after joining
  // the chat via this invite link; 1-99999
  int64 member_limit = 8;

  // Optional. Number of pending join requests created using this link
  int64 pending_join_request_count = 9;
}

message exportChatInviteLink {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;
}

message createChatInviteLink {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Invite link name; 0-32 characters
  string name = 2;

  // Point in time (Unix timestamp) when the link will expire
  int64 expire_date = 3;

  // Maximum number of users that can be members of the chat simultaneously after joining the chat
  // via this invite link; 1-99999
  int64 member_limit = 4;

  // True, if users joining the chat via the link need to be approved by chat administrators. If
  // True, member_limit can't be specified
  bool creates_join_request = 5;
}

message editChatInviteLink {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // The invite link to edit
  string invite_link = 2;

  // Invite link name; 0-32 characters
  string name = 3;

  // Point in time (Unix timestamp) when the link will expire
  int64 expire_date = 4;

  // Maximum number of users that can be members of the chat simultaneously after joining the chat
  // via this invite link; 1-99999
  int64 member_limit = 5;

  // True, if users joining the chat via the link need to be approved by chat administrators. If
  // True, member_limit can't be specified
  bool creates_join_request = 6;
}

message revokeChatInviteLink {

  // Unique identifier of the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // The invite link to revoke
  string invite_link = 2;
}

message ChatJoinRequest {

  // Chat to which the request was sent
  Chat chat = 1;

  // User that sent the join request
  User from = 2;

  // Date the request was sent in Unix time
  int64 date = 3;

  // Optional. Bio of the user.
  string bio = 4;

  // Optional. Chat invite link that was used by the user to send the join request
  ChatInviteLink invite_link = 5;
}

message approveChatJoinRequest {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;
}

message declineChatJoinRequest {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;
}

message ChatLocation {

  // The location to which the supergroup is connected. Can't be a live location.
  Location location = 1;

  // Location address; 1-64 characters, as defined by the chat owner
  string address = 2;
}

message banChatMember {

  // Unique identifier for the target group or username of the target supergroup or channel (in the
  // format @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;

  // Date when the user will be unbanned, unix time. If user is banned for more than 366 days or
  // less than 30 seconds from the current time they are considered to be banned forever. Applied
  // for supergroups and channels only.
  int64 until_date = 3;

  // Pass True to delete all messages from the chat for the user that is being removed. If False,
  // the user will be able to see messages in the group that were sent before the user was removed.
  // Always True for supergroups and channels.
  bool revoke_messages = 4;
}

message unbanChatMember {

  // Unique identifier for the target group or username of the target supergroup or channel (in the
  // format @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;

  // Do nothing if the user is not banned
  bool only_if_banned = 3;
}

message restrictChatMember {

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;

  // A JSON-serialized object for new user permissions
  ChatPermissions permissions = 3;

  // Date when restrictions will be lifted for the user, unix time. If user is restricted for more
  // than 366 days or less than 30 seconds from the current time, they are considered to be
  // restricted forever
  int64 until_date = 4;
}

message promoteChatMember {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;

  // Pass True, if the administrator's presence in the chat is hidden
  bool is_anonymous = 3;

  // Pass True, if the administrator can access the chat event log, chat statistics, message
  // statistics in channels, see channel members, see anonymous administrators in supergroups and
  // ignore slow mode. Implied by any other administrator privilege
  bool can_manage_chat = 4;

  // Pass True, if the administrator can create channel posts, channels only
  bool can_post_messages = 5;

  // Pass True, if the administrator can edit messages of other users and can pin messages, channels
  // only
  bool can_edit_messages = 6;

  // Pass True, if the administrator can delete messages of other users
  bool can_delete_messages = 7;

  // Pass True, if the administrator can manage voice chats
  bool can_manage_voice_chats = 8;

  // Pass True, if the administrator can restrict, ban or unban chat members
  bool can_restrict_members = 9;

  // Pass True, if the administrator can add new administrators with a subset of their own
  // privileges or demote administrators that he has promoted, directly or indirectly (promoted by
  // administrators that were appointed by him)
  bool can_promote_members = 10;

  // Pass True, if the administrator can change chat title, photo and other settings
  bool can_change_info = 11;

  // Pass True, if the administrator can invite new users to the chat
  bool can_invite_users = 12;

  // Pass True, if the administrator can pin messages, supergroups only
  bool can_pin_messages = 13;
}

message getChatMember {

  // Unique identifier for the target chat or username of the target supergroup or channel (in the
  // format @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target user
  int64 user_id = 2;
}

message ChatMemberAdministrator {

  // The member's status in the chat, always “administrator”
  string status = 1;

  // Information about the user
  User user = 2;

  // True, if the bot is allowed to edit administrator privileges of that user
  bool can_be_edited = 3;

  // True, if the user's presence in the chat is hidden
  bool is_anonymous = 4;

  // True, if the administrator can access the chat event log, chat statistics, message statistics
  // in channels, see channel members, see anonymous administrators in supergroups and ignore slow
  // mode. Implied by any other administrator privilege
  bool can_manage_chat = 5;

  // True, if the administrator can delete messages of other users
  bool can_delete_messages = 6;

  // True, if the administrator can manage voice chats
  bool can_manage_voice_chats = 7;

  // True, if the administrator can restrict, ban or unban chat members
  bool can_restrict_members = 8;

  // True, if the administrator can add new administrators with a subset of their own privileges or
  // demote administrators that he has promoted, directly or indirectly (promoted by administrators
  // that were appointed by the user)
  bool can_promote_members = 9;

  // True, if the user is allowed to change the chat title, photo and other settings
  bool can_change_info = 10;

  // True, if the user is allowed to invite new users to the chat
  bool can_invite_users = 11;

  // Optional. True, if the administrator can post in the channel; channels only
  bool can_post_messages = 12;

  // Optional. True, if the administrator can edit messages of other users and can pin messages;
  // channels only
  bool can_edit_messages = 13;

  // Optional. True, if the user is allowed to pin messages; groups and supergroups only
  bool can_pin_messages = 14;

  // Optional. Custom title for this user
  string custom_title = 15;
}

message ChatMemberBanned {

  // The member's status in the chat, always “kicked”
  string status = 1;

  // Information about the user
  User user = 2;

  // Date when restrictions will be lifted for this user; unix time. If 0, then the user is banned
  // forever
  int64 until_date = 3;
}

message getChatMemberCount {

  // Unique identifier for the target chat or username of the target supergroup or channel (in the
  // format @channelusername)
  bytes chat_id = 1;
}

message ChatMemberLeft {

  // The member's status in the chat, always “left”
  string status = 1;

  // Information about the user
  User user = 2;
}

message ChatMemberMember {

  // The member's status in the chat, always “member”
  string status = 1;

  // Information about the user
  User user = 2;
}

message ChatMemberOwner {

  // The member's status in the chat, always “creator”
  string status = 1;

  // Information about the user
  User user = 2;

  // True, if the user's presence in the chat is hidden
  bool is_anonymous = 3;

  // Optional. Custom title for this user
  string custom_title = 4;
}

message ChatMemberRestricted {

  // The member's status in the chat, always “restricted”
  string status = 1;

  // Information about the user
  User user = 2;

  // True, if the user is a member of the chat at the moment of the request
  bool is_member = 3;

  // True, if the user is allowed to change the chat title, photo and other settings
  bool can_change_info = 4;

  // True, if the user is allowed to invite new users to the chat
  bool can_invite_users = 5;

  // True, if the user is allowed to pin messages
  bool can_pin_messages = 6;

  // True, if the user is allowed to send text messages, contacts, locations and venues
  bool can_send_messages = 7;

  // True, if the user is allowed to send audios, documents, photos, videos, video notes and voice
  // notes
  bool can_send_media_messages = 8;

  // True, if the user is allowed to send polls
  bool can_send_polls = 9;

  // True, if the user is allowed to send animations, games, stickers and use inline bots
  bool can_send_other_messages = 10;

  // True, if the user is allowed to add web page previews to their messages
  bool can_add_web_page_previews = 11;

  // Date when restrictions will be lifted for this user; unix time. If 0, then the user is
  // restricted forever
  int64 until_date = 12;
}

message ChatMemberUpdated {

  // Chat the user belongs to
  Chat chat = 1;

  // Performer of the action, which resulted in the change
  User from = 2;

  // Date the change was done in Unix time
  int64 date = 3;

  // Previous information about the chat member
  ChatMember old_chat_member = 4;

  // New information about the chat member
  ChatMember new_chat_member = 5;

  // Optional. Chat invite link, which was used by the user to join the chat; for joining by invite
  // link events only.
  ChatInviteLink invite_link = 6;
}

message pinChatMessage {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Identifier of a message to pin
  int64 message_id = 2;

  // Pass True, if it is not necessary to send a notification to all chat members about the new
  // pinned message. Notifications are always disabled in channels and private chats.
  bool disable_notification = 3;
}

message unpinChatMessage {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Identifier of a message to unpin. If not specified, the most recent pinned message (by sending
  // date) will be unpinned.
  int64 message_id = 2;
}

message ChatPermissions {

  // Optional. True, if the user is allowed to send text messages, contacts, locations and venues
  bool can_send_messages = 1;

  // Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes
  // and voice notes, implies can_send_messages
  bool can_send_media_messages = 2;

  // Optional. True, if the user is allowed to send polls, implies can_send_messages
  bool can_send_polls = 3;

  // Optional. True, if the user is allowed to send animations, games, stickers and use inline bots,
  // implies can_send_media_messages
  bool can_send_other_messages = 4;

  // Optional. True, if the user is allowed to add web page previews to their messages, implies
  // can_send_media_messages
  bool can_add_web_page_previews = 5;

  // Optional. True, if the user is allowed to change the chat title, photo and other settings.
  // Ignored in public supergroups
  bool can_change_info = 6;

  // Optional. True, if the user is allowed to invite new users to the chat
  bool can_invite_users = 7;

  // Optional. True, if the user is allowed to pin messages. Ignored in public supergroups
  bool can_pin_messages = 8;
}

message setChatPermissions {

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 1;

  // A JSON-serialized object for new default chat permissions
  ChatPermissions permissions = 2;
}

message ChatPhoto {

  // File identifier of small (160x160) chat photo. This file_id can be used only for photo download
  // and only for as long as the photo is not changed.
  string small_file_id = 1;

  // Unique file identifier of small (160x160) chat photo, which is supposed to be the same over
  // time and for different bots. Can't be used to download or reuse the file.
  string small_file_unique_id = 2;

  // File identifier of big (640x640) chat photo. This file_id can be used only for photo download
  // and only for as long as the photo is not changed.
  string big_file_id = 3;

  // Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time
  // and for different bots. Can't be used to download or reuse the file.
  string big_file_unique_id = 4;
}

message setChatPhoto {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // New chat photo, uploaded using multipart/form-data
  InputFile photo = 2;
}

message deleteChatPhoto {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;
}

message banChatSenderChat {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target sender chat
  int64 sender_chat_id = 2;
}

message unbanChatSenderChat {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Unique identifier of the target sender chat
  int64 sender_chat_id = 2;
}

message setChatStickerSet {

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 1;

  // Name of the sticker set to be set as the group sticker set
  string sticker_set_name = 2;
}

message deleteChatStickerSet {

  // Unique identifier for the target chat or username of the target supergroup (in the format
  // @supergroupusername)
  bytes chat_id = 1;
}

message setChatTitle {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // New chat title, 1-255 characters
  string title = 2;
}

message ChosenInlineResult {

  // The unique identifier for the result that was chosen
  string result_id = 1;

  // The user that chose the result
  User from = 2;

  // Optional. Sender location, only for bots that require user location
  Location location = 3;

  // Optional. Identifier of the sent inline message. Available only if there is an inline keyboard
  // attached to the message. Will be also received in callback queries and can be used to edit the
  // message.
  string inline_message_id = 4;

  // The query that was used to obtain the result
  string query = 5;
}

message Contact {

  // Contact's phone number
  string phone_number = 1;

  // Contact's first name
  string first_name = 2;

  // Optional. Contact's last name
  string last_name = 3;

  // Optional. Contact's user identifier in Telegram. This number may have more than 32 significant
  // bits and some programming languages may have difficulty/silent defects in interpreting it. But
  // it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe
  // for storing this identifier.
  int64 user_id = 4;

  // Optional. Additional data about the contact in the form of a vCard
  string vcard = 5;
}

message sendContact {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Contact's phone number
  string phone_number = 2;

  // Contact's first name
  string first_name = 3;

  // Contact's last name
  string last_name = 4;

  // Additional data about the contact in the form of a vCard, 0-2048 bytes
  string vcard = 5;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 6;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 7;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 8;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 9;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove keyboard or to force a reply from the user.
  bytes reply_markup = 10;
}

message Dice {

  // Emoji on which the dice throw animation is based
  string emoji = 1;

  // Value of the dice, 1-6 for “”, “” and “” base emoji, 1-5 for “” and “” base emoji, 1-64 for “”
  // base emoji
  int64 value = 2;
}

message sendDice {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Emoji on which the dice throw animation is based. Currently, must be one of “”, “”, “”, “”, “”,
  // or “”. Dice can have values 1-6 for “”, “” and “”, values 1-5 for “” and “”, and values 1-64
  // for “”. Defaults to “”
  string emoji = 2;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 3;

  // Protects the contents of the sent message from forwarding
  bool protect_content = 4;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 5;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 6;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 7;
}

message Document {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Optional. Document thumbnail as defined by sender
  PhotoSize thumb = 3;

  // Optional. Original filename as defined by sender
  string file_name = 4;

  // Optional. MIME type of the file as defined by sender
  string mime_type = 5;

  // Optional. File size in bytes
  int64 file_size = 6;
}

message sendDocument {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // File to send. Pass a file_id as String to send a file that exists on the Telegram servers
  // (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or
  // upload a new one using multipart/form-data. More info on Sending Files »
  bytes document = 2;

  // Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
  // server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
  // width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 3;

  // Document caption (may also be used when resending documents by file_id), 0-1024 characters
  // after entities parsing
  string caption = 4;

  // Mode for parsing entities in the document caption. See formatting options for more details.
  string parse_mode = 5;

  // A JSON-serialized list of special entities that appear in the caption, which can be specified
  // instead of parse_mode
  repeated MessageEntity caption_entities = 6;

  // Disables automatic server-side content type detection for files uploaded using
  // multipart/form-data
  bool disable_content_type_detection = 7;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 8;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 9;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 10;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 11;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 12;
}

message EncryptedCredentials {

  // Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and
  // secrets required for EncryptedPassportElement decryption and authentication
  string data = 1;

  // Base64-encoded data hash for data authentication
  string hash = 2;

  // Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption
  string secret = 3;
}

message EncryptedPassportElement {

  // Element type. One of “personal_details”, “passport”, “driver_license”, “identity_card”,
  // “internal_passport”, “address”, “utility_bill”, “bank_statement”, “rental_agreement”,
  // “passport_registration”, “temporary_registration”, “phone_number”, “email”.
  string type = 1;

  // Optional. Base64-encoded encrypted Telegram Passport element data provided by the user,
  // available for “personal_details”, “passport”, “driver_license”, “identity_card”,
  // “internal_passport” and “address” types. Can be decrypted and verified using the accompanying
  // EncryptedCredentials.
  string data = 2;

  // Optional. User's verified phone number, available only for “phone_number” type
  string phone_number = 3;

  // Optional. User's verified email address, available only for “email” type
  string email = 4;

  // Optional. Array of encrypted files with documents provided by the user, available for
  // “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and
  // “temporary_registration” types. Files can be decrypted and verified using the accompanying
  // EncryptedCredentials.
  repeated PassportFile files = 5;

  // Optional. Encrypted file with the front side of the document, provided by the user. Available
  // for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file can be
  // decrypted and verified using the accompanying EncryptedCredentials.
  PassportFile front_side = 6;

  // Optional. Encrypted file with the reverse side of the document, provided by the user. Available
  // for “driver_license” and “identity_card”. The file can be decrypted and verified using the
  // accompanying EncryptedCredentials.
  PassportFile reverse_side = 7;

  // Optional. Encrypted file with the selfie of the user holding a document, provided by the user;
  // available for “passport”, “driver_license”, “identity_card” and “internal_passport”. The file
  // can be decrypted and verified using the accompanying EncryptedCredentials.
  PassportFile selfie = 8;

  // Optional. Array of encrypted files with translated versions of documents provided by the user.
  // Available if requested for “passport”, “driver_license”, “identity_card”, “internal_passport”,
  // “utility_bill”, “bank_statement”, “rental_agreement”, “passport_registration” and
  // “temporary_registration” types. Files can be decrypted and verified using the accompanying
  // EncryptedCredentials.
  repeated PassportFile translation = 9;

  // Base64-encoded element hash for using in PassportElementErrorUnspecified
  string hash = 10;
}

message File {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Optional. File size in bytes, if known
  int64 file_size = 3;

  // Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.
  string file_path = 4;
}

message getFile {

  // File identifier to get info about
  string file_id = 1;
}

message ForceReply {

  // Shows reply interface to the user, as if they manually selected the bot's message and tapped
  // 'Reply'
  bool force_reply = 1;

  // Optional. The placeholder to be shown in the input field when the reply is active; 1-64
  // characters
  string input_field_placeholder = 2;

  // Optional. Use this parameter if you want to force reply from specific users only. Targets: 1)
  // users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply
  // (has reply_to_message_id), sender of the original message.
  bool selective = 3;
}

message sendGame {

  // Unique identifier for the target chat
  int64 chat_id = 1;

  // Short name of the game, serves as the unique identifier for the game. Set up your games via
  // Botfather.
  string game_short_name = 2;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 3;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 4;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 5;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 6;

  // A JSON-serialized object for an inline keyboard. If empty, one 'Play game_title' button will be
  // shown. If not empty, the first button must launch the game.
  InlineKeyboardMarkup reply_markup = 7;
}

message Game {

  // Title of the game
  string title = 1;

  // Description of the game
  string description = 2;

  // Photo that will be displayed in the game message in chats.
  repeated PhotoSize photo = 3;

  // Optional. Brief description of the game or high scores included in the game message. Can be
  // automatically edited to include current high scores for the game when the bot calls
  // setGameScore, or manually edited using editMessageText. 0-4096 characters.
  string text = 4;

  // Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc.
  repeated MessageEntity text_entities = 5;

  // Optional. Animation that will be displayed in the game message in chats. Upload via BotFather
  Animation animation = 6;
}

message GameHighScore {

  // Position in high score table for the game
  int64 position = 1;

  // User
  User user = 2;

  // Score
  int64 score = 3;
}

message getGameHighScores {

  // Target user id
  int64 user_id = 1;

  // Required if inline_message_id is not specified. Unique identifier for the target chat
  int64 chat_id = 2;

  // Required if inline_message_id is not specified. Identifier of the sent message
  int64 message_id = 3;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 4;
}

message setGameScore {

  // User identifier
  int64 user_id = 1;

  // New score, must be non-negative
  int64 score = 2;

  // Pass True, if the high score is allowed to decrease. This can be useful when fixing mistakes or
  // banning cheaters
  bool force = 3;

  // Pass True, if the game message should not be automatically edited to include the current
  // scoreboard
  bool disable_edit_message = 4;

  // Required if inline_message_id is not specified. Unique identifier for the target chat
  int64 chat_id = 5;

  // Required if inline_message_id is not specified. Identifier of the sent message
  int64 message_id = 6;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 7;
}

message InlineKeyboardButton {

  // Label text on the button
  string text = 1;

  // Optional. HTTP or tg:// url to be opened when the button is pressed. Links
  // tg://user?id=<user_id> can be used to mention a user by their ID without using a username, if
  // this is allowed by their privacy settings.
  string url = 2;

  // Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement
  // for the Telegram Login Widget.
  LoginUrl login_url = 3;

  // Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes
  string callback_data = 4;

  // Optional. If set, pressing the button will prompt the user to select one of their chats, open
  // that chat and insert the bot's username and the specified inline query in the input field. Can
  // be empty, in which case just the bot's username will be inserted.Note: This offers an easy way
  // for users to start using your bot in inline mode when they are currently in a private chat with
  // it. Especially useful when combined with switch_pm… actions – in this case the user will be
  // automatically returned to the chat they switched from, skipping the chat selection screen.
  string switch_inline_query = 5;

  // Optional. If set, pressing the button will insert the bot's username and the specified inline
  // query in the current chat's input field. Can be empty, in which case only the bot's username
  // will be inserted.This offers a quick way for the user to open your bot in inline mode in the
  // same chat – good for selecting something from multiple options.
  string switch_inline_query_current_chat = 6;

  // Optional. Description of the game that will be launched when the user presses the button.NOTE:
  // This type of button must always be the first button in the first row.
  CallbackGame callback_game = 7;

  // Optional. Specify True, to send a Pay button.NOTE: This type of button must always be the first
  // button in the first row and can only be used in invoice messages.
  bool pay = 8;
}

message InlineKeyboardMarkup {

  // Array of button rows, each represented by an Array of InlineKeyboardButton objects
  bytes inline_keyboard = 1;
}

message InlineQuery {

  // Unique identifier for this query
  string id = 1;

  // Sender
  User from = 2;

  // Text of the query (up to 256 characters)
  string query = 3;

  // Offset of the results to be returned, can be controlled by the bot
  string offset = 4;

  // Optional. Type of the chat, from which the inline query was sent. Can be either “sender” for a
  // private chat with the inline query sender, “private”, “group”, “supergroup”, or “channel”. The
  // chat type should be always known for requests sent from official clients and most third-party
  // clients, unless the request was sent from a secret chat
  string chat_type = 5;

  // Optional. Sender location, only for bots that request user location
  Location location = 6;
}

message answerInlineQuery {

  // Unique identifier for the answered query
  string inline_query_id = 1;

  // A JSON-serialized array of results for the inline query
  repeated InlineQueryResult results = 2;

  // The maximum amount of time in seconds that the result of the inline query may be cached on the
  // server. Defaults to 300.
  int64 cache_time = 3;

  // Pass True, if results may be cached on the server side only for the user that sent the query.
  // By default, results may be returned to any user who sends the same query
  bool is_personal = 4;

  // Pass the offset that a client should send in the next query with the same text to receive more
  // results. Pass an empty string if there are no more results or if you don't support pagination.
  // Offset length can't exceed 64 bytes.
  string next_offset = 5;

  // If passed, clients will display a button with specified text that switches the user to a
  // private chat with the bot and sends the bot a start message with the parameter
  // switch_pm_parameter
  string switch_pm_text = 6;

  // Deep-linking parameter for the /start message sent to the bot when user presses the switch
  // button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed.Example: An inline bot that
  // sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt
  // search results accordingly. To do this, it displays a 'Connect your YouTube account' button
  // above the results, or even before showing any. The user presses the button, switches to a
  // private chat with the bot and, in doing so, passes a start parameter that instructs the bot to
  // return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can
  // easily return to the chat where they wanted to use the bot's inline capabilities.
  string switch_pm_parameter = 7;
}

message InlineQueryResultArticle {

  // Type of the result, must be article
  string type = 1;

  // Unique identifier for this result, 1-64 Bytes
  string id = 2;

  // Title of the result
  string title = 3;

  // Content of the message to be sent
  InputMessageContent input_message_content = 4;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 5;

  // Optional. URL of the result
  string url = 6;

  // Optional. Pass True, if you don't want the URL to be shown in the message
  bool hide_url = 7;

  // Optional. Short description of the result
  string description = 8;

  // Optional. Url of the thumbnail for the result
  string thumb_url = 9;

  // Optional. Thumbnail width
  int64 thumb_width = 10;

  // Optional. Thumbnail height
  int64 thumb_height = 11;
}

message InlineQueryResultAudio {

  // Type of the result, must be audio
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid URL for the audio file
  string audio_url = 3;

  // Title
  string title = 4;

  // Optional. Caption, 0-1024 characters after entities parsing
  string caption = 5;

  // Optional. Mode for parsing entities in the audio caption. See formatting options for more
  // details.
  string parse_mode = 6;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 7;

  // Optional. Performer
  string performer = 8;

  // Optional. Audio duration in seconds
  int64 audio_duration = 9;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 10;

  // Optional. Content of the message to be sent instead of the audio
  InputMessageContent input_message_content = 11;
}

message InlineQueryResultCachedAudio {

  // Type of the result, must be audio
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid file identifier for the audio file
  string audio_file_id = 3;

  // Optional. Caption, 0-1024 characters after entities parsing
  string caption = 4;

  // Optional. Mode for parsing entities in the audio caption. See formatting options for more
  // details.
  string parse_mode = 5;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 6;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 7;

  // Optional. Content of the message to be sent instead of the audio
  InputMessageContent input_message_content = 8;
}

message InlineQueryResultCachedDocument {

  // Type of the result, must be document
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // Title for the result
  string title = 3;

  // A valid file identifier for the file
  string document_file_id = 4;

  // Optional. Short description of the result
  string description = 5;

  // Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
  string caption = 6;

  // Optional. Mode for parsing entities in the document caption. See formatting options for more
  // details.
  string parse_mode = 7;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 8;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 9;

  // Optional. Content of the message to be sent instead of the file
  InputMessageContent input_message_content = 10;
}

message InlineQueryResultCachedGif {

  // Type of the result, must be gif
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid file identifier for the GIF file
  string gif_file_id = 3;

  // Optional. Title for the result
  string title = 4;

  // Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
  string caption = 5;

  // Optional. Mode for parsing entities in the caption. See formatting options for more details.
  string parse_mode = 6;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 7;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 8;

  // Optional. Content of the message to be sent instead of the GIF animation
  InputMessageContent input_message_content = 9;
}

message InlineQueryResultCachedMpeg4Gif {

  // Type of the result, must be mpeg4_gif
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid file identifier for the MP4 file
  string mpeg4_file_id = 3;

  // Optional. Title for the result
  string title = 4;

  // Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
  string caption = 5;

  // Optional. Mode for parsing entities in the caption. See formatting options for more details.
  string parse_mode = 6;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 7;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 8;

  // Optional. Content of the message to be sent instead of the video animation
  InputMessageContent input_message_content = 9;
}

message InlineQueryResultCachedPhoto {

  // Type of the result, must be photo
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid file identifier of the photo
  string photo_file_id = 3;

  // Optional. Title for the result
  string title = 4;

  // Optional. Short description of the result
  string description = 5;

  // Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
  string caption = 6;

  // Optional. Mode for parsing entities in the photo caption. See formatting options for more
  // details.
  string parse_mode = 7;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 8;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 9;

  // Optional. Content of the message to be sent instead of the photo
  InputMessageContent input_message_content = 10;
}

message InlineQueryResultCachedSticker {

  // Type of the result, must be sticker
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid file identifier of the sticker
  string sticker_file_id = 3;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 4;

  // Optional. Content of the message to be sent instead of the sticker
  InputMessageContent input_message_content = 5;
}

message InlineQueryResultCachedVideo {

  // Type of the result, must be video
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid file identifier for the video file
  string video_file_id = 3;

  // Title for the result
  string title = 4;

  // Optional. Short description of the result
  string description = 5;

  // Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
  string caption = 6;

  // Optional. Mode for parsing entities in the video caption. See formatting options for more
  // details.
  string parse_mode = 7;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 8;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 9;

  // Optional. Content of the message to be sent instead of the video
  InputMessageContent input_message_content = 10;
}

message InlineQueryResultCachedVoice {

  // Type of the result, must be voice
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid file identifier for the voice message
  string voice_file_id = 3;

  // Voice message title
  string title = 4;

  // Optional. Caption, 0-1024 characters after entities parsing
  string caption = 5;

  // Optional. Mode for parsing entities in the voice message caption. See formatting options for
  // more details.
  string parse_mode = 6;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 7;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 8;

  // Optional. Content of the message to be sent instead of the voice message
  InputMessageContent input_message_content = 9;
}

message InlineQueryResultContact {

  // Type of the result, must be contact
  string type = 1;

  // Unique identifier for this result, 1-64 Bytes
  string id = 2;

  // Contact's phone number
  string phone_number = 3;

  // Contact's first name
  string first_name = 4;

  // Optional. Contact's last name
  string last_name = 5;

  // Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
  string vcard = 6;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 7;

  // Optional. Content of the message to be sent instead of the contact
  InputMessageContent input_message_content = 8;

  // Optional. Url of the thumbnail for the result
  string thumb_url = 9;

  // Optional. Thumbnail width
  int64 thumb_width = 10;

  // Optional. Thumbnail height
  int64 thumb_height = 11;
}

message InlineQueryResultDocument {

  // Type of the result, must be document
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // Title for the result
  string title = 3;

  // Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
  string caption = 4;

  // Optional. Mode for parsing entities in the document caption. See formatting options for more
  // details.
  string parse_mode = 5;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 6;

  // A valid URL for the file
  string document_url = 7;

  // Mime type of the content of the file, either “application/pdf” or “application/zip”
  string mime_type = 8;

  // Optional. Short description of the result
  string description = 9;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 10;

  // Optional. Content of the message to be sent instead of the file
  InputMessageContent input_message_content = 11;

  // Optional. URL of the thumbnail (JPEG only) for the file
  string thumb_url = 12;

  // Optional. Thumbnail width
  int64 thumb_width = 13;

  // Optional. Thumbnail height
  int64 thumb_height = 14;
}

message InlineQueryResultGame {

  // Type of the result, must be game
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // Short name of the game
  string game_short_name = 3;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 4;
}

message InlineQueryResultGif {

  // Type of the result, must be gif
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid URL for the GIF file. File size must not exceed 1MB
  string gif_url = 3;

  // Optional. Width of the GIF
  int64 gif_width = 4;

  // Optional. Height of the GIF
  int64 gif_height = 5;

  // Optional. Duration of the GIF in seconds
  int64 gif_duration = 6;

  // URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
  string thumb_url = 7;

  // Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”.
  // Defaults to “image/jpeg”
  string thumb_mime_type = 8;

  // Optional. Title for the result
  string title = 9;

  // Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing
  string caption = 10;

  // Optional. Mode for parsing entities in the caption. See formatting options for more details.
  string parse_mode = 11;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 12;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 13;

  // Optional. Content of the message to be sent instead of the GIF animation
  InputMessageContent input_message_content = 14;
}

message InlineQueryResultLocation {

  // Type of the result, must be location
  string type = 1;

  // Unique identifier for this result, 1-64 Bytes
  string id = 2;

  // Location latitude in degrees
  float latitude = 3;

  // Location longitude in degrees
  float longitude = 4;

  // Location title
  string title = 5;

  // Optional. The radius of uncertainty for the location, measured in meters; 0-1500
  float horizontal_accuracy = 6;

  // Optional. Period in seconds for which the location can be updated, should be between 60 and
  // 86400.
  int64 live_period = 7;

  // Optional. For live locations, a direction in which the user is moving, in degrees. Must be
  // between 1 and 360 if specified.
  int64 heading = 8;

  // Optional. For live locations, a maximum distance for proximity alerts about approaching another
  // chat member, in meters. Must be between 1 and 100000 if specified.
  int64 proximity_alert_radius = 9;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 10;

  // Optional. Content of the message to be sent instead of the location
  InputMessageContent input_message_content = 11;

  // Optional. Url of the thumbnail for the result
  string thumb_url = 12;

  // Optional. Thumbnail width
  int64 thumb_width = 13;

  // Optional. Thumbnail height
  int64 thumb_height = 14;
}

message InlineQueryResultMpeg4Gif {

  // Type of the result, must be mpeg4_gif
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid URL for the MP4 file. File size must not exceed 1MB
  string mpeg4_url = 3;

  // Optional. Video width
  int64 mpeg4_width = 4;

  // Optional. Video height
  int64 mpeg4_height = 5;

  // Optional. Video duration in seconds
  int64 mpeg4_duration = 6;

  // URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result
  string thumb_url = 7;

  // Optional. MIME type of the thumbnail, must be one of “image/jpeg”, “image/gif”, or “video/mp4”.
  // Defaults to “image/jpeg”
  string thumb_mime_type = 8;

  // Optional. Title for the result
  string title = 9;

  // Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing
  string caption = 10;

  // Optional. Mode for parsing entities in the caption. See formatting options for more details.
  string parse_mode = 11;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 12;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 13;

  // Optional. Content of the message to be sent instead of the video animation
  InputMessageContent input_message_content = 14;
}

message InlineQueryResultPhoto {

  // Type of the result, must be photo
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB
  string photo_url = 3;

  // URL of the thumbnail for the photo
  string thumb_url = 4;

  // Optional. Width of the photo
  int64 photo_width = 5;

  // Optional. Height of the photo
  int64 photo_height = 6;

  // Optional. Title for the result
  string title = 7;

  // Optional. Short description of the result
  string description = 8;

  // Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
  string caption = 9;

  // Optional. Mode for parsing entities in the photo caption. See formatting options for more
  // details.
  string parse_mode = 10;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 11;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 12;

  // Optional. Content of the message to be sent instead of the photo
  InputMessageContent input_message_content = 13;
}

message InlineQueryResultVenue {

  // Type of the result, must be venue
  string type = 1;

  // Unique identifier for this result, 1-64 Bytes
  string id = 2;

  // Latitude of the venue location in degrees
  float latitude = 3;

  // Longitude of the venue location in degrees
  float longitude = 4;

  // Title of the venue
  string title = 5;

  // Address of the venue
  string address = 6;

  // Optional. Foursquare identifier of the venue if known
  string foursquare_id = 7;

  // Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”,
  // “arts_entertainment/aquarium” or “food/icecream”.)
  string foursquare_type = 8;

  // Optional. Google Places identifier of the venue
  string google_place_id = 9;

  // Optional. Google Places type of the venue. (See supported types.)
  string google_place_type = 10;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 11;

  // Optional. Content of the message to be sent instead of the venue
  InputMessageContent input_message_content = 12;

  // Optional. Url of the thumbnail for the result
  string thumb_url = 13;

  // Optional. Thumbnail width
  int64 thumb_width = 14;

  // Optional. Thumbnail height
  int64 thumb_height = 15;
}

message InlineQueryResultVideo {

  // Type of the result, must be video
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid URL for the embedded video player or video file
  string video_url = 3;

  // Mime type of the content of video url, “text/html” or “video/mp4”
  string mime_type = 4;

  // URL of the thumbnail (JPEG only) for the video
  string thumb_url = 5;

  // Title for the result
  string title = 6;

  // Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
  string caption = 7;

  // Optional. Mode for parsing entities in the video caption. See formatting options for more
  // details.
  string parse_mode = 8;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 9;

  // Optional. Video width
  int64 video_width = 10;

  // Optional. Video height
  int64 video_height = 11;

  // Optional. Video duration in seconds
  int64 video_duration = 12;

  // Optional. Short description of the result
  string description = 13;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 14;

  // Optional. Content of the message to be sent instead of the video. This field is required if
  // InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).
  InputMessageContent input_message_content = 15;
}

message InlineQueryResultVoice {

  // Type of the result, must be voice
  string type = 1;

  // Unique identifier for this result, 1-64 bytes
  string id = 2;

  // A valid URL for the voice recording
  string voice_url = 3;

  // Recording title
  string title = 4;

  // Optional. Caption, 0-1024 characters after entities parsing
  string caption = 5;

  // Optional. Mode for parsing entities in the voice message caption. See formatting options for
  // more details.
  string parse_mode = 6;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 7;

  // Optional. Recording duration in seconds
  int64 voice_duration = 8;

  // Optional. Inline keyboard attached to the message
  InlineKeyboardMarkup reply_markup = 9;

  // Optional. Content of the message to be sent instead of the voice recording
  InputMessageContent input_message_content = 10;
}

message InputContactMessageContent {

  // Contact's phone number
  string phone_number = 1;

  // Contact's first name
  string first_name = 2;

  // Optional. Contact's last name
  string last_name = 3;

  // Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes
  string vcard = 4;
}

message InputInvoiceMessageContent {

  // Product name, 1-32 characters
  string title = 1;

  // Product description, 1-255 characters
  string description = 2;

  // Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your
  // internal processes.
  string payload = 3;

  // Payment provider token, obtained via Botfather
  string provider_token = 4;

  // Three-letter ISO 4217 currency code, see more on currencies
  string currency = 5;

  // Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount,
  // delivery cost, delivery tax, bonus, etc.)
  repeated LabeledPrice prices = 6;

  // Optional. The maximum accepted amount for tips in the smallest units of the currency (integer,
  // not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See
  // the exp parameter in currencies.json, it shows the number of digits past the decimal point for
  // each currency (2 for the majority of currencies). Defaults to 0
  int64 max_tip_amount = 7;

  // Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the
  // currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The
  // suggested tip amounts must be positive, passed in a strictly increased order and must not
  // exceed max_tip_amount.
  repeated int64 suggested_tip_amounts = 8;

  // Optional. A JSON-serialized object for data about the invoice, which will be shared with the
  // payment provider. A detailed description of the required fields should be provided by the
  // payment provider.
  string provider_data = 9;

  // Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing
  // image for a service. People like it better when they see what they are paying for.
  string photo_url = 10;

  // Optional. Photo size
  int64 photo_size = 11;

  // Optional. Photo width
  int64 photo_width = 12;

  // Optional. Photo height
  int64 photo_height = 13;

  // Optional. Pass True, if you require the user's full name to complete the order
  bool need_name = 14;

  // Optional. Pass True, if you require the user's phone number to complete the order
  bool need_phone_number = 15;

  // Optional. Pass True, if you require the user's email address to complete the order
  bool need_email = 16;

  // Optional. Pass True, if you require the user's shipping address to complete the order
  bool need_shipping_address = 17;

  // Optional. Pass True, if user's phone number should be sent to provider
  bool send_phone_number_to_provider = 18;

  // Optional. Pass True, if user's email address should be sent to provider
  bool send_email_to_provider = 19;

  // Optional. Pass True, if the final price depends on the shipping method
  bool is_flexible = 20;
}

message InputLocationMessageContent {

  // Latitude of the location in degrees
  float latitude = 1;

  // Longitude of the location in degrees
  float longitude = 2;

  // Optional. The radius of uncertainty for the location, measured in meters; 0-1500
  float horizontal_accuracy = 3;

  // Optional. Period in seconds for which the location can be updated, should be between 60 and
  // 86400.
  int64 live_period = 4;

  // Optional. For live locations, a direction in which the user is moving, in degrees. Must be
  // between 1 and 360 if specified.
  int64 heading = 5;

  // Optional. For live locations, a maximum distance for proximity alerts about approaching another
  // chat member, in meters. Must be between 1 and 100000 if specified.
  int64 proximity_alert_radius = 6;
}

message InputMediaAnimation {

  // Type of the result, must be animation
  string type = 1;

  // File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
  // pass an HTTP URL for Telegram to get a file from the Internet, or pass
  // “attach://<file_attach_name>” to upload a new one using multipart/form-data under
  // <file_attach_name> name. More info on Sending Files »
  string media = 2;

  // Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
  // supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
  // thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 3;

  // Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing
  string caption = 4;

  // Optional. Mode for parsing entities in the animation caption. See formatting options for more
  // details.
  string parse_mode = 5;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 6;

  // Optional. Animation width
  int64 width = 7;

  // Optional. Animation height
  int64 height = 8;

  // Optional. Animation duration in seconds
  int64 duration = 9;
}

message InputMediaAudio {

  // Type of the result, must be audio
  string type = 1;

  // File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
  // pass an HTTP URL for Telegram to get a file from the Internet, or pass
  // “attach://<file_attach_name>” to upload a new one using multipart/form-data under
  // <file_attach_name> name. More info on Sending Files »
  string media = 2;

  // Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
  // supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
  // thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 3;

  // Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing
  string caption = 4;

  // Optional. Mode for parsing entities in the audio caption. See formatting options for more
  // details.
  string parse_mode = 5;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 6;

  // Optional. Duration of the audio in seconds
  int64 duration = 7;

  // Optional. Performer of the audio
  string performer = 8;

  // Optional. Title of the audio
  string title = 9;
}

message InputMediaDocument {

  // Type of the result, must be document
  string type = 1;

  // File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
  // pass an HTTP URL for Telegram to get a file from the Internet, or pass
  // “attach://<file_attach_name>” to upload a new one using multipart/form-data under
  // <file_attach_name> name. More info on Sending Files »
  string media = 2;

  // Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
  // supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
  // thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 3;

  // Optional. Caption of the document to be sent, 0-1024 characters after entities parsing
  string caption = 4;

  // Optional. Mode for parsing entities in the document caption. See formatting options for more
  // details.
  string parse_mode = 5;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 6;

  // Optional. Disables automatic server-side content type detection for files uploaded using
  // multipart/form-data. Always True, if the document is sent as part of an album.
  bool disable_content_type_detection = 7;
}

message InputMediaPhoto {

  // Type of the result, must be photo
  string type = 1;

  // File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
  // pass an HTTP URL for Telegram to get a file from the Internet, or pass
  // “attach://<file_attach_name>” to upload a new one using multipart/form-data under
  // <file_attach_name> name. More info on Sending Files »
  string media = 2;

  // Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing
  string caption = 3;

  // Optional. Mode for parsing entities in the photo caption. See formatting options for more
  // details.
  string parse_mode = 4;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 5;
}

message InputMediaVideo {

  // Type of the result, must be video
  string type = 1;

  // File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended),
  // pass an HTTP URL for Telegram to get a file from the Internet, or pass
  // “attach://<file_attach_name>” to upload a new one using multipart/form-data under
  // <file_attach_name> name. More info on Sending Files »
  string media = 2;

  // Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is
  // supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A
  // thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 3;

  // Optional. Caption of the video to be sent, 0-1024 characters after entities parsing
  string caption = 4;

  // Optional. Mode for parsing entities in the video caption. See formatting options for more
  // details.
  string parse_mode = 5;

  // Optional. List of special entities that appear in the caption, which can be specified instead
  // of parse_mode
  repeated MessageEntity caption_entities = 6;

  // Optional. Video width
  int64 width = 7;

  // Optional. Video height
  int64 height = 8;

  // Optional. Video duration in seconds
  int64 duration = 9;

  // Optional. Pass True, if the uploaded video is suitable for streaming
  bool supports_streaming = 10;
}

message InputTextMessageContent {

  // Text of the message to be sent, 1-4096 characters
  string message_text = 1;

  // Optional. Mode for parsing entities in the message text. See formatting options for more
  // details.
  string parse_mode = 2;

  // Optional. List of special entities that appear in message text, which can be specified instead
  // of parse_mode
  repeated MessageEntity entities = 3;

  // Optional. Disables link previews for links in the sent message
  bool disable_web_page_preview = 4;
}

message InputVenueMessageContent {

  // Latitude of the venue in degrees
  float latitude = 1;

  // Longitude of the venue in degrees
  float longitude = 2;

  // Name of the venue
  string title = 3;

  // Address of the venue
  string address = 4;

  // Optional. Foursquare identifier of the venue, if known
  string foursquare_id = 5;

  // Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”,
  // “arts_entertainment/aquarium” or “food/icecream”.)
  string foursquare_type = 6;

  // Optional. Google Places identifier of the venue
  string google_place_id = 7;

  // Optional. Google Places type of the venue. (See supported types.)
  string google_place_type = 8;
}

message sendInvoice {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Product name, 1-32 characters
  string title = 2;

  // Product description, 1-255 characters
  string description = 3;

  // Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your
  // internal processes.
  string payload = 4;

  // Payments provider token, obtained via Botfather
  string provider_token = 5;

  // Three-letter ISO 4217 currency code, see more on currencies
  string currency = 6;

  // Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount,
  // delivery cost, delivery tax, bonus, etc.)
  repeated LabeledPrice prices = 7;

  // The maximum accepted amount for tips in the smallest units of the currency (integer, not
  // float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the
  // exp parameter in currencies.json, it shows the number of digits past the decimal point for each
  // currency (2 for the majority of currencies). Defaults to 0
  int64 max_tip_amount = 8;

  // A JSON-serialized array of suggested amounts of tips in the smallest units of the currency
  // (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested
  // tip amounts must be positive, passed in a strictly increased order and must not exceed
  // max_tip_amount.
  repeated int64 suggested_tip_amounts = 9;

  // Unique deep-linking parameter. If left empty, forwarded copies of the sent message will have a
  // Pay button, allowing multiple users to pay directly from the forwarded message, using the same
  // invoice. If non-empty, forwarded copies of the sent message will have a URL button with a deep
  // link to the bot (instead of a Pay button), with the value used as the start parameter
  string start_parameter = 10;

  // A JSON-serialized data about the invoice, which will be shared with the payment provider. A
  // detailed description of required fields should be provided by the payment provider.
  string provider_data = 11;

  // URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for
  // a service. People like it better when they see what they are paying for.
  string photo_url = 12;

  // Photo size
  int64 photo_size = 13;

  // Photo width
  int64 photo_width = 14;

  // Photo height
  int64 photo_height = 15;

  // Pass True, if you require the user's full name to complete the order
  bool need_name = 16;

  // Pass True, if you require the user's phone number to complete the order
  bool need_phone_number = 17;

  // Pass True, if you require the user's email address to complete the order
  bool need_email = 18;

  // Pass True, if you require the user's shipping address to complete the order
  bool need_shipping_address = 19;

  // Pass True, if user's phone number should be sent to provider
  bool send_phone_number_to_provider = 20;

  // Pass True, if user's email address should be sent to provider
  bool send_email_to_provider = 21;

  // Pass True, if the final price depends on the shipping method
  bool is_flexible = 22;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 23;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 24;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 25;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 26;

  // A JSON-serialized object for an inline keyboard. If empty, one 'Pay total price' button will be
  // shown. If not empty, the first button must be a Pay button.
  InlineKeyboardMarkup reply_markup = 27;
}

message Invoice {

  // Product name
  string title = 1;

  // Product description
  string description = 2;

  // Unique bot deep-linking parameter that can be used to generate this invoice
  string start_parameter = 3;

  // Three-letter ISO 4217 currency code
  string currency = 4;

  // Total price in the smallest units of the currency (integer, not float/double). For example, for
  // a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the
  // number of digits past the decimal point for each currency (2 for the majority of currencies).
  int64 total_amount = 5;
}

message KeyboardButton {

  // Text of the button. If none of the optional fields are used, it will be sent as a message when
  // the button is pressed
  string text = 1;

  // Optional. If True, the user's phone number will be sent as a contact when the button is
  // pressed. Available in private chats only
  bool request_contact = 2;

  // Optional. If True, the user's current location will be sent when the button is pressed.
  // Available in private chats only
  bool request_location = 3;

  // Optional. If specified, the user will be asked to create a poll and send it to the bot when the
  // button is pressed. Available in private chats only
  KeyboardButtonPollType request_poll = 4;
}

message KeyboardButtonPollType {

  // Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If
  // regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to
  // create a poll of any type.
  string type = 1;
}

message LabeledPrice {

  // Portion label
  string label = 1;

  // Price of the product in the smallest units of the currency (integer, not float/double). For
  // example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json,
  // it shows the number of digits past the decimal point for each currency (2 for the majority of
  // currencies).
  int64 amount = 2;
}

message Location {

  // Longitude as defined by sender
  float longitude = 1;

  // Latitude as defined by sender
  float latitude = 2;

  // Optional. The radius of uncertainty for the location, measured in meters; 0-1500
  float horizontal_accuracy = 3;

  // Optional. Time relative to the message sending date, during which the location can be updated;
  // in seconds. For active live locations only.
  int64 live_period = 4;

  // Optional. The direction in which user is moving, in degrees; 1-360. For active live locations
  // only.
  int64 heading = 5;

  // Optional. Maximum distance for proximity alerts about approaching another chat member, in
  // meters. For sent live locations only.
  int64 proximity_alert_radius = 6;
}

message sendLocation {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Latitude of the location
  float latitude = 2;

  // Longitude of the location
  float longitude = 3;

  // The radius of uncertainty for the location, measured in meters; 0-1500
  float horizontal_accuracy = 4;

  // Period in seconds for which the location will be updated (see Live Locations, should be between
  // 60 and 86400.
  int64 live_period = 5;

  // For live locations, a direction in which the user is moving, in degrees. Must be between 1 and
  // 360 if specified.
  int64 heading = 6;

  // For live locations, a maximum distance for proximity alerts about approaching another chat
  // member, in meters. Must be between 1 and 100000 if specified.
  int64 proximity_alert_radius = 7;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 8;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 9;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 10;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 11;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 12;
}

message LoginUrl {

  // An HTTP URL to be opened with user authorization data added to the query string when the button
  // is pressed. If the user refuses to provide authorization data, the original URL without
  // information about the user will be opened. The data added is the same as described in Receiving
  // authorization data.NOTE: You must always check the hash of the received data to verify the
  // authentication and the integrity of the data as described in Checking authorization.
  string url = 1;

  // Optional. New text of the button in forwarded messages.
  string forward_text = 2;

  // Optional. Username of a bot, which will be used for user authorization. See Setting up a bot
  // for more details. If not specified, the current bot's username will be assumed. The url's
  // domain must be the same as the domain linked with the bot. See Linking your domain to the bot
  // for more details.
  string bot_username = 3;

  // Optional. Pass True to request the permission for your bot to send messages to the user.
  bool request_write_access = 4;
}

message MaskPosition {

  // The part of the face relative to which the mask should be placed. One of “forehead”, “eyes”,
  // “mouth”, or “chin”.
  string point = 1;

  // Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For
  // example, choosing -1.0 will place mask just to the left of the default mask position.
  float x_shift = 2;

  // Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom.
  // For example, 1.0 will place the mask just below the default mask position.
  float y_shift = 3;

  // Mask scaling coefficient. For example, 2.0 means double size.
  float scale = 4;
}

message sendMediaGroup {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // A JSON-serialized array describing messages to be sent, must include 2-10 items
  //  repeated InputMediaAudio, InputMediaDocument, InputMediaPhoto and InputMediaVideo media = 2;

  // Sends messages silently. Users will receive a notification with no sound.
  bool disable_notification = 3;

  // Protects the contents of the sent messages from forwarding and saving
  bool protect_content = 4;

  // If the messages are a reply, ID of the original message
  int64 reply_to_message_id = 5;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 6;
}

message Message {

  // Unique message identifier inside this chat
  int64 message_id = 1;

  // Optional. Sender of the message; empty for messages sent to channels. For backward
  // compatibility, the field contains a fake sender user in non-channel chats, if the message was
  // sent on behalf of a chat.
  User from = 2;

  // Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for
  // channel posts, the supergroup itself for messages from anonymous group administrators, the
  // linked channel for messages automatically forwarded to the discussion group.  For backward
  // compatibility, the field from contains a fake sender user in non-channel chats, if the message
  // was sent on behalf of a chat.
  Chat sender_chat = 3;

  // Date the message was sent in Unix time
  int64 date = 4;

  // Conversation the message belongs to
  Chat chat = 5;

  // Optional. For forwarded messages, sender of the original message
  User forward_from = 6;

  // Optional. For messages forwarded from channels or from anonymous administrators, information
  // about the original sender chat
  Chat forward_from_chat = 7;

  // Optional. For messages forwarded from channels, identifier of the original message in the
  // channel
  int64 forward_from_message_id = 8;

  // Optional. For forwarded messages that were originally sent in channels or by an anonymous chat
  // administrator, signature of the message sender if present
  string forward_signature = 9;

  // Optional. Sender's name for messages forwarded from users who disallow adding a link to their
  // account in forwarded messages
  string forward_sender_name = 10;

  // Optional. For forwarded messages, date the original message was sent in Unix time
  int64 forward_date = 11;

  // Optional. True, if the message is a channel post that was automatically forwarded to the
  // connected discussion group
  bool is_automatic_forward = 12;

  // Optional. For replies, the original message. Note that the Message object in this field will
  // not contain further reply_to_message fields even if it itself is a reply.
  Message reply_to_message = 13;

  // Optional. Bot through which the message was sent
  User via_bot = 14;

  // Optional. Date the message was last edited in Unix time
  int64 edit_date = 15;

  // Optional. True, if the message can't be forwarded
  bool has_protected_content = 16;

  // Optional. The unique identifier of a media message group this message belongs to
  string media_group_id = 17;

  // Optional. Signature of the post author for messages in channels, or the custom title of an
  // anonymous group administrator
  string author_signature = 18;

  // Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters
  string text = 19;

  // Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that
  // appear in the text
  repeated MessageEntity entities = 20;

  // Optional. Message is an animation, information about the animation. For backward compatibility,
  // when this field is set, the document field will also be set
  Animation animation = 21;

  // Optional. Message is an audio file, information about the file
  Audio audio = 22;

  // Optional. Message is a general file, information about the file
  Document document = 23;

  // Optional. Message is a photo, available sizes of the photo
  repeated PhotoSize photo = 24;

  // Optional. Message is a sticker, information about the sticker
  Sticker sticker = 25;

  // Optional. Message is a video, information about the video
  Video video = 26;

  // Optional. Message is a video note, information about the video message
  VideoNote video_note = 27;

  // Optional. Message is a voice message, information about the file
  Voice voice = 28;

  // Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters
  string caption = 29;

  // Optional. For messages with a caption, special entities like usernames, URLs, bot commands,
  // etc. that appear in the caption
  repeated MessageEntity caption_entities = 30;

  // Optional. Message is a shared contact, information about the contact
  Contact contact = 31;

  // Optional. Message is a dice with random value
  Dice dice = 32;

  // Optional. Message is a game, information about the game. More about games »
  Game game = 33;

  // Optional. Message is a native poll, information about the poll
  Poll poll = 34;

  // Optional. Message is a venue, information about the venue. For backward compatibility, when
  // this field is set, the location field will also be set
  Venue venue = 35;

  // Optional. Message is a shared location, information about the location
  Location location = 36;

  // Optional. New members that were added to the group or supergroup and information about them
  // (the bot itself may be one of these members)
  repeated User new_chat_members = 37;

  // Optional. A member was removed from the group, information about them (this member may be the
  // bot itself)
  User left_chat_member = 38;

  // Optional. A chat title was changed to this value
  string new_chat_title = 39;

  // Optional. A chat photo was change to this value
  repeated PhotoSize new_chat_photo = 40;

  // Optional. Service message: the chat photo was deleted
  bool delete_chat_photo = 41;

  // Optional. Service message: the group has been created
  bool group_chat_created = 42;

  // Optional. Service message: the supergroup has been created. This field can't be received in a
  // message coming through updates, because bot can't be a member of a supergroup when it is
  // created. It can only be found in reply_to_message if someone replies to a very first message in
  // a directly created supergroup.
  bool supergroup_chat_created = 43;

  // Optional. Service message: the channel has been created. This field can't be received in a
  // message coming through updates, because bot can't be a member of a channel when it is created.
  // It can only be found in reply_to_message if someone replies to a very first message in a
  // channel.
  bool channel_chat_created = 44;

  // Optional. Service message: auto-delete timer settings changed in the chat
  MessageAutoDeleteTimerChanged message_auto_delete_timer_changed = 45;

  // Optional. The group has been migrated to a supergroup with the specified identifier. This
  // number may have more than 32 significant bits and some programming languages may have
  // difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a
  // signed 64-bit integer or double-precision float type are safe for storing this identifier.
  int64 migrate_to_chat_id = 46;

  // Optional. The supergroup has been migrated from a group with the specified identifier. This
  // number may have more than 32 significant bits and some programming languages may have
  // difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a
  // signed 64-bit integer or double-precision float type are safe for storing this identifier.
  int64 migrate_from_chat_id = 47;

  // Optional. Specified message was pinned. Note that the Message object in this field will not
  // contain further reply_to_message fields even if it is itself a reply.
  Message pinned_message = 48;

  // Optional. Message is an invoice for a payment, information about the invoice. More about
  // payments »
  Invoice invoice = 49;

  // Optional. Message is a service message about a successful payment, information about the
  // payment. More about payments »
  SuccessfulPayment successful_payment = 50;

  // Optional. The domain name of the website on which the user has logged in. More about Telegram
  // Login »
  string connected_website = 51;

  // Optional. Telegram Passport data
  PassportData passport_data = 52;

  // Optional. Service message. A user in the chat triggered another user's proximity alert while
  // sharing Live Location.
  ProximityAlertTriggered proximity_alert_triggered = 53;

  // Optional. Service message: voice chat scheduled
  VoiceChatScheduled voice_chat_scheduled = 54;

  // Optional. Service message: voice chat started
  VoiceChatStarted voice_chat_started = 55;

  // Optional. Service message: voice chat ended
  VoiceChatEnded voice_chat_ended = 56;

  // Optional. Service message: new participants invited to a voice chat
  VoiceChatParticipantsInvited voice_chat_participants_invited = 57;

  // Optional. Inline keyboard attached to the message. login_url buttons are represented as
  // ordinary url buttons.
  InlineKeyboardMarkup reply_markup = 58;
}

message sendMessage {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Text of the message to be sent, 1-4096 characters after entities parsing
  string text = 2;

  // Mode for parsing entities in the message text. See formatting options for more details.
  string parse_mode = 3;

  // A JSON-serialized list of special entities that appear in message text, which can be specified
  // instead of parse_mode
  repeated MessageEntity entities = 4;

  // Disables link previews for links in this message
  bool disable_web_page_preview = 5;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 6;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 7;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 8;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 9;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 10;
}

message forwardMessage {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Unique identifier for the chat where the original message was sent (or channel username in the
  // format @channelusername)
  bytes from_chat_id = 2;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 3;

  // Protects the contents of the forwarded message from forwarding and saving
  bool protect_content = 4;

  // Message identifier in the chat specified in from_chat_id
  int64 message_id = 5;
}

message copyMessage {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Unique identifier for the chat where the original message was sent (or channel username in the
  // format @channelusername)
  bytes from_chat_id = 2;

  // Message identifier in the chat specified in from_chat_id
  int64 message_id = 3;

  // New caption for media, 0-1024 characters after entities parsing. If not specified, the original
  // caption is kept
  string caption = 4;

  // Mode for parsing entities in the new caption. See formatting options for more details.
  string parse_mode = 5;

  // A JSON-serialized list of special entities that appear in the new caption, which can be
  // specified instead of parse_mode
  repeated MessageEntity caption_entities = 6;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 7;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 8;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 9;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 10;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 11;
}

message deleteMessage {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Identifier of the message to delete
  int64 message_id = 2;
}

message MessageAutoDeleteTimerChanged {

  // New auto-delete time for messages in the chat; in seconds
  int64 message_auto_delete_time = 1;
}

message editMessageCaption {

  // Required if inline_message_id is not specified. Unique identifier for the target chat or
  // username of the target channel (in the format @channelusername)
  bytes chat_id = 1;

  // Required if inline_message_id is not specified. Identifier of the message to edit
  int64 message_id = 2;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 3;

  // New caption of the message, 0-1024 characters after entities parsing
  string caption = 4;

  // Mode for parsing entities in the message caption. See formatting options for more details.
  string parse_mode = 5;

  // A JSON-serialized list of special entities that appear in the caption, which can be specified
  // instead of parse_mode
  repeated MessageEntity caption_entities = 6;

  // A JSON-serialized object for an inline keyboard.
  InlineKeyboardMarkup reply_markup = 7;
}

message MessageEntity {

  // Type of the entity. Currently, can be “mention” (@username), “hashtag” (#hashtag), “cashtag”
  // ($USD), “bot_command” (/start@jobs_bot), “url” (https://telegram.org), “email”
  // (do-not-reply@telegram.org), “phone_number” (+1-212-555-0123), “bold” (bold text), “italic”
  // (italic text), “underline” (underlined text), “strikethrough” (strikethrough text), “spoiler”
  // (spoiler message), “code” (monowidth string), “pre” (monowidth block), “text_link” (for
  // clickable text URLs), “text_mention” (for users without usernames)
  string type = 1;

  // Offset in UTF-16 code units to the start of the entity
  int64 offset = 2;

  // Length of the entity in UTF-16 code units
  int64 length = 3;

  // Optional. For “text_link” only, url that will be opened after user taps on the text
  string url = 4;

  // Optional. For “text_mention” only, the mentioned user
  User user = 5;

  // Optional. For “pre” only, the programming language of the entity text
  string language = 6;
}

message MessageId {

  // Unique message identifier
  int64 message_id = 1;
}

message editMessageLiveLocation {

  // Required if inline_message_id is not specified. Unique identifier for the target chat or
  // username of the target channel (in the format @channelusername)
  bytes chat_id = 1;

  // Required if inline_message_id is not specified. Identifier of the message to edit
  int64 message_id = 2;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 3;

  // Latitude of new location
  float latitude = 4;

  // Longitude of new location
  float longitude = 5;

  // The radius of uncertainty for the location, measured in meters; 0-1500
  float horizontal_accuracy = 6;

  // Direction in which the user is moving, in degrees. Must be between 1 and 360 if specified.
  int64 heading = 7;

  // Maximum distance for proximity alerts about approaching another chat member, in meters. Must be
  // between 1 and 100000 if specified.
  int64 proximity_alert_radius = 8;

  // A JSON-serialized object for a new inline keyboard.
  InlineKeyboardMarkup reply_markup = 9;
}

message stopMessageLiveLocation {

  // Required if inline_message_id is not specified. Unique identifier for the target chat or
  // username of the target channel (in the format @channelusername)
  bytes chat_id = 1;

  // Required if inline_message_id is not specified. Identifier of the message with live location to
  // stop
  int64 message_id = 2;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 3;

  // A JSON-serialized object for a new inline keyboard.
  InlineKeyboardMarkup reply_markup = 4;
}

message editMessageMedia {

  // Required if inline_message_id is not specified. Unique identifier for the target chat or
  // username of the target channel (in the format @channelusername)
  bytes chat_id = 1;

  // Required if inline_message_id is not specified. Identifier of the message to edit
  int64 message_id = 2;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 3;

  // A JSON-serialized object for a new media content of the message
  InputMedia media = 4;

  // A JSON-serialized object for a new inline keyboard.
  InlineKeyboardMarkup reply_markup = 5;
}

message editMessageReplyMarkup {

  // Required if inline_message_id is not specified. Unique identifier for the target chat or
  // username of the target channel (in the format @channelusername)
  bytes chat_id = 1;

  // Required if inline_message_id is not specified. Identifier of the message to edit
  int64 message_id = 2;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 3;

  // A JSON-serialized object for an inline keyboard.
  InlineKeyboardMarkup reply_markup = 4;
}

message editMessageText {

  // Required if inline_message_id is not specified. Unique identifier for the target chat or
  // username of the target channel (in the format @channelusername)
  bytes chat_id = 1;

  // Required if inline_message_id is not specified. Identifier of the message to edit
  int64 message_id = 2;

  // Required if chat_id and message_id are not specified. Identifier of the inline message
  string inline_message_id = 3;

  // New text of the message, 1-4096 characters after entities parsing
  string text = 4;

  // Mode for parsing entities in the message text. See formatting options for more details.
  string parse_mode = 5;

  // A JSON-serialized list of special entities that appear in message text, which can be specified
  // instead of parse_mode
  repeated MessageEntity entities = 6;

  // Disables link previews for links in this message
  bool disable_web_page_preview = 7;

  // A JSON-serialized object for an inline keyboard.
  InlineKeyboardMarkup reply_markup = 8;
}

message setMyCommands {

  // A JSON-serialized list of bot commands to be set as the list of the bot's commands. At most 100
  // commands can be specified.
  repeated BotCommand commands = 1;

  // A JSON-serialized object, describing scope of users for which the commands are relevant.
  // Defaults to BotCommandScopeDefault.
  BotCommandScope scope = 2;

  // A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the
  // given scope, for whose language there are no dedicated commands
  string language_code = 3;
}

message deleteMyCommands {

  // A JSON-serialized object, describing scope of users for which the commands are relevant.
  // Defaults to BotCommandScopeDefault.
  BotCommandScope scope = 1;

  // A two-letter ISO 639-1 language code. If empty, commands will be applied to all users from the
  // given scope, for whose language there are no dedicated commands
  string language_code = 2;
}

message getMyCommands {

  // A JSON-serialized object, describing scope of users. Defaults to BotCommandScopeDefault.
  BotCommandScope scope = 1;

  // A two-letter ISO 639-1 language code or an empty string
  string language_code = 2;
}

message createNewStickerSet {

  // User identifier of created sticker set owner
  int64 user_id = 1;

  // Short name of sticker set, to be used in t.me/addstickers/ URLs (e.g., animals). Can contain
  // only english letters, digits and underscores. Must begin with a letter, can't contain
  // consecutive underscores and must end in "_by_<bot_username>". <bot_username> is case
  // insensitive. 1-64 characters.
  string name = 2;

  // Sticker set title, 1-64 characters
  string title = 3;

  // PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed
  // 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a
  // file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to
  // get a file from the Internet, or upload a new one using multipart/form-data. More info on
  // Sending Files »
  bytes png_sticker = 4;

  // TGS animation with the sticker, uploaded using multipart/form-data. See
  // https://core.telegram.org/stickers#animated-sticker-requirements for technical requirements
  InputFile tgs_sticker = 5;

  // WEBM video with the sticker, uploaded using multipart/form-data. See
  // https://core.telegram.org/stickers#video-sticker-requirements for technical requirements
  InputFile webm_sticker = 6;

  // One or more emoji corresponding to the sticker
  string emojis = 7;

  // Pass True, if a set of mask stickers should be created
  bool contains_masks = 8;

  // A JSON-serialized object for position where the mask should be placed on faces
  MaskPosition mask_position = 9;
}

message OrderInfo {

  // Optional. User name
  string name = 1;

  // Optional. User's phone number
  string phone_number = 2;

  // Optional. User email
  string email = 3;

  // Optional. User shipping address
  ShippingAddress shipping_address = 4;
}

message PassportData {

  // Array with information about documents and other Telegram Passport elements that was shared
  // with the bot
  repeated EncryptedPassportElement data = 1;

  // Encrypted credentials required to decrypt the data
  EncryptedCredentials credentials = 2;
}

message setPassportDataErrors {

  // User identifier
  int64 user_id = 1;

  // A JSON-serialized array describing the errors
  repeated PassportElementError errors = 2;
}

message PassportElementErrorDataField {

  // Error source, must be data
  string source = 1;

  // The section of the user's Telegram Passport which has the error, one of “personal_details”,
  // “passport”, “driver_license”, “identity_card”, “internal_passport”, “address”
  string type = 2;

  // Name of the data field which has the error
  string field_name = 3;

  // Base64-encoded data hash
  string data_hash = 4;

  // Error message
  string message = 5;
}

message PassportElementErrorFile {

  // Error source, must be file
  string source = 1;

  // The section of the user's Telegram Passport which has the issue, one of “utility_bill”,
  // “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”
  string type = 2;

  // Base64-encoded file hash
  string file_hash = 3;

  // Error message
  string message = 4;
}

message PassportElementErrorFiles {

  // Error source, must be files
  string source = 1;

  // The section of the user's Telegram Passport which has the issue, one of “utility_bill”,
  // “bank_statement”, “rental_agreement”, “passport_registration”, “temporary_registration”
  string type = 2;

  // List of base64-encoded file hashes
  repeated string file_hashes = 3;

  // Error message
  string message = 4;
}

message PassportElementErrorFrontSide {

  // Error source, must be front_side
  string source = 1;

  // The section of the user's Telegram Passport which has the issue, one of “passport”,
  // “driver_license”, “identity_card”, “internal_passport”
  string type = 2;

  // Base64-encoded hash of the file with the front side of the document
  string file_hash = 3;

  // Error message
  string message = 4;
}

message PassportElementErrorReverseSide {

  // Error source, must be reverse_side
  string source = 1;

  // The section of the user's Telegram Passport which has the issue, one of “driver_license”,
  // “identity_card”
  string type = 2;

  // Base64-encoded hash of the file with the reverse side of the document
  string file_hash = 3;

  // Error message
  string message = 4;
}

message PassportElementErrorSelfie {

  // Error source, must be selfie
  string source = 1;

  // The section of the user's Telegram Passport which has the issue, one of “passport”,
  // “driver_license”, “identity_card”, “internal_passport”
  string type = 2;

  // Base64-encoded hash of the file with the selfie
  string file_hash = 3;

  // Error message
  string message = 4;
}

message PassportElementErrorTranslationFile {

  // Error source, must be translation_file
  string source = 1;

  // Type of element of the user's Telegram Passport which has the issue, one of “passport”,
  // “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”,
  // “rental_agreement”, “passport_registration”, “temporary_registration”
  string type = 2;

  // Base64-encoded file hash
  string file_hash = 3;

  // Error message
  string message = 4;
}

message PassportElementErrorTranslationFiles {

  // Error source, must be translation_files
  string source = 1;

  // Type of element of the user's Telegram Passport which has the issue, one of “passport”,
  // “driver_license”, “identity_card”, “internal_passport”, “utility_bill”, “bank_statement”,
  // “rental_agreement”, “passport_registration”, “temporary_registration”
  string type = 2;

  // List of base64-encoded file hashes
  repeated string file_hashes = 3;

  // Error message
  string message = 4;
}

message PassportElementErrorUnspecified {

  // Error source, must be unspecified
  string source = 1;

  // Type of element of the user's Telegram Passport which has the issue
  string type = 2;

  // Base64-encoded element hash
  string element_hash = 3;

  // Error message
  string message = 4;
}

message PassportFile {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // File size in bytes
  int64 file_size = 3;

  // Unix time when the file was uploaded
  int64 file_date = 4;
}

message sendPhoto {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers
  // (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or
  // upload a new photo using multipart/form-data. The photo must be at most 10 MB in size. The
  // photo's width and height must not exceed 10000 in total. Width and height ratio must be at most
  // 20. More info on Sending Files »
  bytes photo = 2;

  // Photo caption (may also be used when resending photos by file_id), 0-1024 characters after
  // entities parsing
  string caption = 3;

  // Mode for parsing entities in the photo caption. See formatting options for more details.
  string parse_mode = 4;

  // A JSON-serialized list of special entities that appear in the caption, which can be specified
  // instead of parse_mode
  repeated MessageEntity caption_entities = 5;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 6;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 7;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 8;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 9;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 10;
}

message PhotoSize {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Photo width
  int64 width = 3;

  // Photo height
  int64 height = 4;

  // Optional. File size in bytes
  int64 file_size = 5;
}

message Poll {

  // Unique poll identifier
  string id = 1;

  // Poll question, 1-300 characters
  string question = 2;

  // List of poll options
  repeated PollOption options = 3;

  // Total number of users that voted in the poll
  int64 total_voter_count = 4;

  // True, if the poll is closed
  bool is_closed = 5;

  // True, if the poll is anonymous
  bool is_anonymous = 6;

  // Poll type, currently can be “regular” or “quiz”
  string type = 7;

  // True, if the poll allows multiple answers
  bool allows_multiple_answers = 8;

  // Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz
  // mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the
  // bot.
  int64 correct_option_id = 9;

  // Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon
  // in a quiz-style poll, 0-200 characters
  string explanation = 10;

  // Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the
  // explanation
  repeated MessageEntity explanation_entities = 11;

  // Optional. Amount of time in seconds the poll will be active after creation
  int64 open_period = 12;

  // Optional. Point in time (Unix timestamp) when the poll will be automatically closed
  int64 close_date = 13;
}

message sendPoll {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Poll question, 1-300 characters
  string question = 2;

  // A JSON-serialized list of answer options, 2-10 strings 1-100 characters each
  repeated string options = 3;

  // True, if the poll needs to be anonymous, defaults to True
  bool is_anonymous = 4;

  // Poll type, “quiz” or “regular”, defaults to “regular”
  string type = 5;

  // True, if the poll allows multiple answers, ignored for polls in quiz mode, defaults to False
  bool allows_multiple_answers = 6;

  // 0-based identifier of the correct answer option, required for polls in quiz mode
  int64 correct_option_id = 7;

  // Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a
  // quiz-style poll, 0-200 characters with at most 2 line feeds after entities parsing
  string explanation = 8;

  // Mode for parsing entities in the explanation. See formatting options for more details.
  string explanation_parse_mode = 9;

  // A JSON-serialized list of special entities that appear in the poll explanation, which can be
  // specified instead of parse_mode
  repeated MessageEntity explanation_entities = 10;

  // Amount of time in seconds the poll will be active after creation, 5-600. Can't be used together
  // with close_date.
  int64 open_period = 11;

  // Point in time (Unix timestamp) when the poll will be automatically closed. Must be at least 5
  // and no more than 600 seconds in the future. Can't be used together with open_period.
  int64 close_date = 12;

  // Pass True, if the poll needs to be immediately closed. This can be useful for poll preview.
  bool is_closed = 13;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 14;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 15;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 16;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 17;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 18;
}

message stopPoll {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Identifier of the original message with the poll
  int64 message_id = 2;

  // A JSON-serialized object for a new message inline keyboard.
  InlineKeyboardMarkup reply_markup = 3;
}

message PollAnswer {

  // Unique poll identifier
  string poll_id = 1;

  // The user, who changed the answer to the poll
  User user = 2;

  // 0-based identifiers of answer options, chosen by the user. May be empty if the user retracted
  // their vote.
  repeated int64 option_ids = 3;
}

message PollOption {

  // Option text, 1-100 characters
  string text = 1;

  // Number of users that voted for this option
  int64 voter_count = 2;
}

message answerPreCheckoutQuery {

  // Unique identifier for the query to be answered
  string pre_checkout_query_id = 1;

  // Specify True if everything is alright (goods are available, etc.) and the bot is ready to
  // proceed with the order. Use False if there are any problems.
  bool ok = 2;

  // Required if ok is False. Error message in human readable form that explains the reason for
  // failure to proceed with the checkout (e.g. "Sorry, somebody just bought the last of our amazing
  // black T-shirts while you were busy filling out your payment details. Please choose a different
  // color or garment!"). Telegram will display this message to the user.
  string error_message = 3;
}

message PreCheckoutQuery {

  // Unique query identifier
  string id = 1;

  // User who sent the query
  User from = 2;

  // Three-letter ISO 4217 currency code
  string currency = 3;

  // Total price in the smallest units of the currency (integer, not float/double). For example, for
  // a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the
  // number of digits past the decimal point for each currency (2 for the majority of currencies).
  int64 total_amount = 4;

  // Bot specified invoice payload
  string invoice_payload = 5;

  // Optional. Identifier of the shipping option chosen by the user
  string shipping_option_id = 6;

  // Optional. Order info provided by the user
  OrderInfo order_info = 7;
}

message ProximityAlertTriggered {

  // User that triggered the alert
  User traveler = 1;

  // User that set the alert
  User watcher = 2;

  // The distance between the users
  int64 distance = 3;
}

message ReplyKeyboardMarkup {

  // Array of button rows, each represented by an Array of KeyboardButton objects
  bytes keyboard = 1;

  // Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the
  // keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the
  // custom keyboard is always of the same height as the app's standard keyboard.
  bool resize_keyboard = 2;

  // Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will
  // still be available, but clients will automatically display the usual letter-keyboard in the
  // chat – the user can press a special button in the input field to see the custom keyboard again.
  // Defaults to false.
  bool one_time_keyboard = 3;

  // Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64
  // characters
  string input_field_placeholder = 4;

  // Optional. Use this parameter if you want to show the keyboard to specific users only. Targets:
  // 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a
  // reply (has reply_to_message_id), sender of the original message.Example: A user requests to
  // change the bot's language, bot replies to the request with a keyboard to select the new
  // language. Other users in the group don't see the keyboard.
  bool selective = 5;
}

message ReplyKeyboardRemove {

  // Requests clients to remove the custom keyboard (user will not be able to summon this keyboard;
  // if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in
  // ReplyKeyboardMarkup)
  bool remove_keyboard = 1;

  // Optional. Use this parameter if you want to remove the keyboard for specific users only.
  // Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's
  // message is a reply (has reply_to_message_id), sender of the original message.Example: A user
  // votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard
  // for that user, while still showing the keyboard with poll options to users who haven't voted
  // yet.
  bool selective = 2;
}

message ResponseParameters {

  // Optional. The group has been migrated to a supergroup with the specified identifier. This
  // number may have more than 32 significant bits and some programming languages may have
  // difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a
  // signed 64-bit integer or double-precision float type are safe for storing this identifier.
  int64 migrate_to_chat_id = 1;

  // Optional. In case of exceeding flood control, the number of seconds left to wait before the
  // request can be repeated
  int64 retry_after = 2;
}

message ShippingAddress {

  // ISO 3166-1 alpha-2 country code
  string country_code = 1;

  // State, if applicable
  string state = 2;

  // City
  string city = 3;

  // First line for the address
  string street_line1 = 4;

  // Second line for the address
  string street_line2 = 5;

  // Address post code
  string post_code = 6;
}

message ShippingOption {

  // Shipping option identifier
  string id = 1;

  // Option title
  string title = 2;

  // List of price portions
  repeated LabeledPrice prices = 3;
}

message answerShippingQuery {

  // Unique identifier for the query to be answered
  string shipping_query_id = 1;

  // Specify True if delivery to the specified address is possible and False if there are any
  // problems (for example, if delivery to the specified address is not possible)
  bool ok = 2;

  // Required if ok is True. A JSON-serialized array of available shipping options.
  repeated ShippingOption shipping_options = 3;

  // Required if ok is False. Error message in human readable form that explains why it is
  // impossible to complete the order (e.g. "Sorry, delivery to your desired address is
  // unavailable'). Telegram will display this message to the user.
  string error_message = 4;
}

message ShippingQuery {

  // Unique query identifier
  string id = 1;

  // User who sent the query
  User from = 2;

  // Bot specified invoice payload
  string invoice_payload = 3;

  // User specified shipping address
  ShippingAddress shipping_address = 4;
}

message Sticker {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Sticker width
  int64 width = 3;

  // Sticker height
  int64 height = 4;

  // True, if the sticker is animated
  bool is_animated = 5;

  // True, if the sticker is a video sticker
  bool is_video = 6;

  // Optional. Sticker thumbnail in the .WEBP or .JPG format
  PhotoSize thumb = 7;

  // Optional. Emoji associated with the sticker
  string emoji = 8;

  // Optional. Name of the sticker set to which the sticker belongs
  string set_name = 9;

  // Optional. For mask stickers, the position where the mask should be placed
  MaskPosition mask_position = 10;

  // Optional. File size in bytes
  int64 file_size = 11;
}

message sendSticker {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Sticker to send. Pass a file_id as String to send a file that exists on the Telegram servers
  // (recommended), pass an HTTP URL as a String for Telegram to get a .WEBP file from the Internet,
  // or upload a new one using multipart/form-data. More info on Sending Files »
  bytes sticker = 2;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 3;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 4;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 5;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 6;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 7;
}

message uploadStickerFile {

  // User identifier of sticker file owner
  int64 user_id = 1;

  // PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed
  // 512px, and either width or height must be exactly 512px. More info on Sending Files »
  InputFile png_sticker = 2;
}

message deleteStickerFromSet {

  // File identifier of the sticker
  string sticker = 1;
}

message setStickerPositionInSet {

  // File identifier of the sticker
  string sticker = 1;

  // New sticker position in the set, zero-based
  int64 position = 2;
}

message StickerSet {

  // Sticker set name
  string name = 1;

  // Sticker set title
  string title = 2;

  // True, if the sticker set contains animated stickers
  bool is_animated = 3;

  // True, if the sticker set contains video stickers
  bool is_video = 4;

  // True, if the sticker set contains masks
  bool contains_masks = 5;

  // List of all set stickers
  repeated Sticker stickers = 6;

  // Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format
  PhotoSize thumb = 7;
}

message getStickerSet {

  // Name of the sticker set
  string name = 1;
}

message setStickerSetThumb {

  // Sticker set name
  string name = 1;

  // User identifier of the sticker set owner
  int64 user_id = 2;

  // A PNG image with the thumbnail, must be up to 128 kilobytes in size and have width and height
  // exactly 100px, or a TGS animation with the thumbnail up to 32 kilobytes in size; see
  // https://core.telegram.org/stickers#animated-sticker-requirements for animated sticker technical
  // requirements, or a WEBM video with the thumbnail up to 32 kilobytes in size; see
  // https://core.telegram.org/stickers#video-sticker-requirements for video sticker technical
  // requirements. Pass a file_id as a String to send a file that already exists on the Telegram
  // servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a
  // new one using multipart/form-data. More info on Sending Files ». Animated sticker set
  // thumbnails can't be uploaded via HTTP URL.
  bytes thumb = 3;
}

message addStickerToSet {

  // User identifier of sticker set owner
  int64 user_id = 1;

  // Sticker set name
  string name = 2;

  // PNG image with the sticker, must be up to 512 kilobytes in size, dimensions must not exceed
  // 512px, and either width or height must be exactly 512px. Pass a file_id as a String to send a
  // file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to
  // get a file from the Internet, or upload a new one using multipart/form-data. More info on
  // Sending Files »
  bytes png_sticker = 3;

  // TGS animation with the sticker, uploaded using multipart/form-data. See
  // https://core.telegram.org/stickers#animated-sticker-requirements for technical requirements
  InputFile tgs_sticker = 4;

  // WEBM video with the sticker, uploaded using multipart/form-data. See
  // https://core.telegram.org/stickers#video-sticker-requirements for technical requirements
  InputFile webm_sticker = 5;

  // One or more emoji corresponding to the sticker
  string emojis = 6;

  // A JSON-serialized object for position where the mask should be placed on faces
  MaskPosition mask_position = 7;
}

message SuccessfulPayment {

  // Three-letter ISO 4217 currency code
  string currency = 1;

  // Total price in the smallest units of the currency (integer, not float/double). For example, for
  // a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the
  // number of digits past the decimal point for each currency (2 for the majority of currencies).
  int64 total_amount = 2;

  // Bot specified invoice payload
  string invoice_payload = 3;

  // Optional. Identifier of the shipping option chosen by the user
  string shipping_option_id = 4;

  // Optional. Order info provided by the user
  OrderInfo order_info = 5;

  // Telegram payment identifier
  string telegram_payment_charge_id = 6;

  // Provider payment identifier
  string provider_payment_charge_id = 7;
}

message Update {

  // The update's unique identifier. Update identifiers start from a certain positive number and
  // increase sequentially. This ID becomes especially handy if you're using Webhooks, since it
  // allows you to ignore repeated updates or to restore the correct update sequence, should they
  // get out of order. If there are no new updates for at least a week, then identifier of the next
  // update will be chosen randomly instead of sequentially.
  int64 update_id = 1;

  // Optional. New incoming message of any kind — text, photo, sticker, etc.
  Message message = 2;

  // Optional. New version of a message that is known to the bot and was edited
  Message edited_message = 3;

  // Optional. New incoming channel post of any kind — text, photo, sticker, etc.
  Message channel_post = 4;

  // Optional. New version of a channel post that is known to the bot and was edited
  Message edited_channel_post = 5;

  // Optional. New incoming inline query
  InlineQuery inline_query = 6;

  // Optional. The result of an inline query that was chosen by a user and sent to their chat
  // partner. Please see our documentation on the feedback collecting for details on how to enable
  // these updates for your bot.
  ChosenInlineResult chosen_inline_result = 7;

  // Optional. New incoming callback query
  CallbackQuery callback_query = 8;

  // Optional. New incoming shipping query. Only for invoices with flexible price
  ShippingQuery shipping_query = 9;

  // Optional. New incoming pre-checkout query. Contains full information about checkout
  PreCheckoutQuery pre_checkout_query = 10;

  // Optional. New poll state. Bots receive only updates about stopped polls and polls, which are
  // sent by the bot
  Poll poll = 11;

  // Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in
  // polls that were sent by the bot itself.
  PollAnswer poll_answer = 12;

  // Optional. The bot's chat member status was updated in a chat. For private chats, this update is
  // received only when the bot is blocked or unblocked by the user.
  ChatMemberUpdated my_chat_member = 13;

  // Optional. A chat member's status was updated in a chat. The bot must be an administrator in the
  // chat and must explicitly specify “chat_member” in the list of allowed_updates to receive these
  // updates.
  ChatMemberUpdated chat_member = 14;

  // Optional. A request to join the chat has been sent. The bot must have the can_invite_users
  // administrator right in the chat to receive these updates.
  ChatJoinRequest chat_join_request = 15;
}

message getUpdates {

  // Identifier of the first update to be returned. Must be greater by one than the highest among
  // the identifiers of previously received updates. By default, updates starting with the earliest
  // unconfirmed update are returned. An update is considered confirmed as soon as getUpdates is
  // called with an offset higher than its update_id. The negative offset can be specified to
  // retrieve updates starting from -offset update from the end of the updates queue. All previous
  // updates will forgotten.
  int64 offset = 1;

  // Limits the number of updates to be retrieved. Values between 1-100 are accepted. Defaults to
  // 100.
  int64 limit = 2;

  // Timeout in seconds for long polling. Defaults to 0, i.e. usual short polling. Should be
  // positive, short polling should be used for testing purposes only.
  int64 timeout = 3;

  // A JSON-serialized list of the update types you want your bot to receive. For example, specify
  // [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types.
  // See Update for a complete list of available update types. Specify an empty list to receive all
  // update types except chat_member (default). If not specified, the previous setting will be
  // used.Please note that this parameter doesn't affect updates created before the call to the
  // getUpdates, so unwanted updates may be received for a short period of time.
  repeated string allowed_updates = 4;
}

message User {

  // Unique identifier for this user or bot. This number may have more than 32 significant bits and
  // some programming languages may have difficulty/silent defects in interpreting it. But it has at
  // most 52 significant bits, so a 64-bit integer or double-precision float type are safe for
  // storing this identifier.
  int64 id = 1;

  // True, if this user is a bot
  bool is_bot = 2;

  // User's or bot's first name
  string first_name = 3;

  // Optional. User's or bot's last name
  string last_name = 4;

  // Optional. User's or bot's username
  string username = 5;

  // Optional. IETF language tag of the user's language
  string language_code = 6;

  // Optional. True, if the bot can be invited to groups. Returned only in getMe.
  bool can_join_groups = 7;

  // Optional. True, if privacy mode is disabled for the bot. Returned only in getMe.
  bool can_read_all_group_messages = 8;

  // Optional. True, if the bot supports inline queries. Returned only in getMe.
  bool supports_inline_queries = 9;
}

message UserProfilePhotos {

  // Total number of profile pictures the target user has
  int64 total_count = 1;

  // Requested profile pictures (in up to 4 sizes each)
  bytes photos = 2;
}

message getUserProfilePhotos {

  // Unique identifier of the target user
  int64 user_id = 1;

  // Sequential number of the first photo to be returned. By default, all photos are returned.
  int64 offset = 2;

  // Limits the number of photos to be retrieved. Values between 1-100 are accepted. Defaults to
  // 100.
  int64 limit = 3;
}

message Venue {

  // Venue location. Can't be a live location
  Location location = 1;

  // Name of the venue
  string title = 2;

  // Address of the venue
  string address = 3;

  // Optional. Foursquare identifier of the venue
  string foursquare_id = 4;

  // Optional. Foursquare type of the venue. (For example, “arts_entertainment/default”,
  // “arts_entertainment/aquarium” or “food/icecream”.)
  string foursquare_type = 5;

  // Optional. Google Places identifier of the venue
  string google_place_id = 6;

  // Optional. Google Places type of the venue. (See supported types.)
  string google_place_type = 7;
}

message sendVenue {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Latitude of the venue
  float latitude = 2;

  // Longitude of the venue
  float longitude = 3;

  // Name of the venue
  string title = 4;

  // Address of the venue
  string address = 5;

  // Foursquare identifier of the venue
  string foursquare_id = 6;

  // Foursquare type of the venue, if known. (For example, “arts_entertainment/default”,
  // “arts_entertainment/aquarium” or “food/icecream”.)
  string foursquare_type = 7;

  // Google Places identifier of the venue
  string google_place_id = 8;

  // Google Places type of the venue. (See supported types.)
  string google_place_type = 9;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 10;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 11;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 12;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 13;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 14;
}

message Video {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Video width as defined by sender
  int64 width = 3;

  // Video height as defined by sender
  int64 height = 4;

  // Duration of the video in seconds as defined by sender
  int64 duration = 5;

  // Optional. Video thumbnail
  PhotoSize thumb = 6;

  // Optional. Original filename as defined by sender
  string file_name = 7;

  // Optional. Mime type of a file as defined by sender
  string mime_type = 8;

  // Optional. File size in bytes
  int64 file_size = 9;
}

message sendVideo {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Video to send. Pass a file_id as String to send a video that exists on the Telegram servers
  // (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or
  // upload a new video using multipart/form-data. More info on Sending Files »
  bytes video = 2;

  // Duration of sent video in seconds
  int64 duration = 3;

  // Video width
  int64 width = 4;

  // Video height
  int64 height = 5;

  // Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
  // server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
  // width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 6;

  // Video caption (may also be used when resending videos by file_id), 0-1024 characters after
  // entities parsing
  string caption = 7;

  // Mode for parsing entities in the video caption. See formatting options for more details.
  string parse_mode = 8;

  // A JSON-serialized list of special entities that appear in the caption, which can be specified
  // instead of parse_mode
  repeated MessageEntity caption_entities = 9;

  // Pass True, if the uploaded video is suitable for streaming
  bool supports_streaming = 10;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 11;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 12;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 13;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 14;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 15;
}

message VideoNote {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Video width and height (diameter of the video message) as defined by sender
  int64 length = 3;

  // Duration of the video in seconds as defined by sender
  int64 duration = 4;

  // Optional. Video thumbnail
  PhotoSize thumb = 5;

  // Optional. File size in bytes
  int64 file_size = 6;
}

message sendVideoNote {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Video note to send. Pass a file_id as String to send a video note that exists on the Telegram
  // servers (recommended) or upload a new video using multipart/form-data. More info on Sending
  // Files ». Sending video notes by a URL is currently unsupported
  bytes video_note = 2;

  // Duration of sent video in seconds
  int64 duration = 3;

  // Video width and height, i.e. diameter of the video message
  int64 length = 4;

  // Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported
  // server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's
  // width and height should not exceed 320. Ignored if the file is not uploaded using
  // multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you
  // can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data
  // under <file_attach_name>. More info on Sending Files »
  bytes thumb = 5;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 6;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 7;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 8;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 9;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 10;
}

message Voice {

  // Identifier for this file, which can be used to download or reuse the file
  string file_id = 1;

  // Unique identifier for this file, which is supposed to be the same over time and for different
  // bots. Can't be used to download or reuse the file.
  string file_unique_id = 2;

  // Duration of the audio in seconds as defined by sender
  int64 duration = 3;

  // Optional. MIME type of the file as defined by sender
  string mime_type = 4;

  // Optional. File size in bytes
  int64 file_size = 5;
}

message sendVoice {

  // Unique identifier for the target chat or username of the target channel (in the format
  // @channelusername)
  bytes chat_id = 1;

  // Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers
  // (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or
  // upload a new one using multipart/form-data. More info on Sending Files »
  bytes voice = 2;

  // Voice message caption, 0-1024 characters after entities parsing
  string caption = 3;

  // Mode for parsing entities in the voice message caption. See formatting options for more
  // details.
  string parse_mode = 4;

  // A JSON-serialized list of special entities that appear in the caption, which can be specified
  // instead of parse_mode
  repeated MessageEntity caption_entities = 5;

  // Duration of the voice message in seconds
  int64 duration = 6;

  // Sends the message silently. Users will receive a notification with no sound.
  bool disable_notification = 7;

  // Protects the contents of the sent message from forwarding and saving
  bool protect_content = 8;

  // If the message is a reply, ID of the original message
  int64 reply_to_message_id = 9;

  // Pass True, if the message should be sent even if the specified replied-to message is not found
  bool allow_sending_without_reply = 10;

  // Additional interface options. A JSON-serialized object for an inline keyboard, custom reply
  // keyboard, instructions to remove reply keyboard or to force a reply from the user.
  bytes reply_markup = 11;
}

message VoiceChatEnded {

  // Voice chat duration in seconds
  int64 duration = 1;
}

message VoiceChatParticipantsInvited {

  // Optional. New members that were invited to the voice chat
  repeated User users = 1;
}

message VoiceChatScheduled {

  // Point in time (Unix timestamp) when the voice chat is supposed to be started by a chat
  // administrator
  int64 start_date = 1;
}

message setWebhook {

  // HTTPS url to send updates to. Use an empty string to remove webhook integration
  string url = 1;

  // Upload your public key certificate so that the root certificate in use can be checked. See our
  // self-signed guide for details.
  InputFile certificate = 2;

  // The fixed IP address which will be used to send webhook requests instead of the IP address
  // resolved through DNS
  string ip_address = 3;

  // Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery,
  // 1-100. Defaults to 40. Use lower values to limit the load on your bot's server, and higher
  // values to increase your bot's throughput.
  int64 max_connections = 4;

  // A JSON-serialized list of the update types you want your bot to receive. For example, specify
  // [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types.
  // See Update for a complete list of available update types. Specify an empty list to receive all
  // update types except chat_member (default). If not specified, the previous setting will be
  // used.Please note that this parameter doesn't affect updates created before the call to the
  // setWebhook, so unwanted updates may be received for a short period of time.
  repeated string allowed_updates = 5;

  // Pass True to drop all pending updates
  bool drop_pending_updates = 6;
}

message deleteWebhook {

  // Pass True to drop all pending updates
  bool drop_pending_updates = 1;
}

message WebhookInfo {

  // Webhook URL, may be empty if webhook is not set up
  string url = 1;

  // True, if a custom certificate was provided for webhook certificate checks
  bool has_custom_certificate = 2;

  // Number of updates awaiting delivery
  int64 pending_update_count = 3;

  // Optional. Currently used webhook IP address
  string ip_address = 4;

  // Optional. Unix time for the most recent error that happened when trying to deliver an update
  // via webhook
  int64 last_error_date = 5;

  // Optional. Error message in human-readable format for the most recent error that happened when
  // trying to deliver an update via webhook
  string last_error_message = 6;

  // Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update
  // delivery
  int64 max_connections = 7;

  // Optional. A list of update types the bot is subscribed to. Defaults to all update types except
  // chat_member
  repeated string allowed_updates = 8;
}

